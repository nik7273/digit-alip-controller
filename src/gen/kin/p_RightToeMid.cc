/*
 * Automatically Generated from Mathematica.
 * Wed 27 Oct 2021 23:09:49 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <eigen3/Eigen/Dense>

#include "gen/kin/p_RightToeMid.hh"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

INLINE double Sec(double x) { return 1/cos(x); }
INLINE double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(Eigen::Ref<Eigen::VectorXd> p_output1,const Eigen::Ref<const Eigen::VectorXd> var1)
{
  double t12;
  double t564;
  double t729;
  double t639;
  double t734;
  double t14;
  double t296;
  double t370;
  double t437;
  double t475;
  double t693;
  double t917;
  double t939;
  double t1187;
  double t1725;
  double t1748;
  double t1752;
  double t13;
  double t1857;
  double t1884;
  double t1887;
  double t2046;
  double t2054;
  double t2060;
  double t2126;
  double t2129;
  double t2134;
  double t2177;
  double t2347;
  double t2369;
  double t2372;
  double t2389;
  double t2394;
  double t2429;
  double t2685;
  double t2697;
  double t2743;
  double t2755;
  double t2756;
  double t2764;
  double t2894;
  double t2895;
  double t2897;
  double t2939;
  double t2987;
  double t2991;
  double t3059;
  double t3206;
  double t3273;
  double t3275;
  double t3333;
  double t3335;
  double t3347;
  double t3348;
  double t3350;
  double t3376;
  double t3624;
  double t3625;
  double t3654;
  double t3680;
  double t3704;
  double t3706;
  double t3986;
  double t4002;
  double t4042;
  double t4043;
  double t4060;
  double t4062;
  double t4182;
  double t4186;
  double t4200;
  double t4395;
  double t4489;
  double t4500;
  double t4502;
  double t4513;
  double t4516;
  double t4517;
  double t4622;
  double t4660;
  double t4677;
  double t4682;
  double t4683;
  double t4685;
  double t4744;
  double t4755;
  double t4762;
  double t4791;
  double t4829;
  double t4856;
  double t4889;
  double t4959;
  double t4987;
  double t5039;
  double t5058;
  double t5060;
  double t5081;
  double t5125;
  double t5134;
  double t5149;
  double t5228;
  double t5232;
  double t5234;
  double t5236;
  double t5239;
  double t5248;
  double t5336;
  double t5347;
  double t5370;
  double t5376;
  double t5389;
  double t5402;
  double t5417;
  double t5423;
  double t5435;
  double t5441;
  double t5712;
  double t5717;
  double t5725;
  double t5745;
  double t5474;
  double t5477;
  double t5483;
  double t5484;
  double t5500;
  double t5512;
  double t5568;
  double t5579;
  double t5586;
  double t5590;
  double t5615;
  double t5625;
  double t5656;
  double t5667;
  double t5672;
  double t5681;
  double t5691;
  double t5696;
  double t5795;
  double t5876;
  double t5742;
  double t6045;
  double t5817;
  double t5823;
  double t5825;
  double t5826;
  double t5828;
  double t5833;
  double t6028;
  double t5953;
  double t5960;
  double t5969;
  double t5976;
  double t5981;
  double t5996;
  double t6064;
  double t6067;
  double t6069;
  double t6082;
  double t6087;
  double t6092;
  double t5796;
  double t6132;
  double t5779;
  double t6265;
  double t5854;
  double t6146;
  double t5879;
  double t373;
  double t443;
  double t449;
  double t1371;
  double t1567;
  double t1786;
  double t1816;
  double t1843;
  double t1856;
  double t6397;
  double t6408;
  double t6417;
  double t6424;
  double t6427;
  double t6451;
  double t1902;
  double t1921;
  double t2026;
  double t2039;
  double t2099;
  double t2175;
  double t2179;
  double t2327;
  double t6484;
  double t6489;
  double t6503;
  double t6506;
  double t6507;
  double t6523;
  double t2615;
  double t2635;
  double t2656;
  double t2658;
  double t2888;
  double t2892;
  double t2893;
  double t3274;
  double t3282;
  double t3312;
  double t6535;
  double t6542;
  double t6557;
  double t6564;
  double t6568;
  double t6569;
  double t6570;
  double t6571;
  double t6583;
  double t6590;
  double t6594;
  double t6595;
  double t3480;
  double t3554;
  double t3558;
  double t3619;
  double t3759;
  double t3880;
  double t3928;
  double t3931;
  double t4113;
  double t4208;
  double t4397;
  double t4406;
  double t6598;
  double t6605;
  double t6612;
  double t6617;
  double t6625;
  double t6630;
  double t6634;
  double t6637;
  double t6660;
  double t6667;
  double t6668;
  double t6671;
  double t4569;
  double t4605;
  double t4606;
  double t4610;
  double t4725;
  double t4730;
  double t4733;
  double t5000;
  double t5042;
  double t5046;
  double t6682;
  double t6687;
  double t6688;
  double t6695;
  double t6708;
  double t6711;
  double t6712;
  double t6729;
  double t6740;
  double t6741;
  double t6743;
  double t6744;
  double t5162;
  double t5167;
  double t5170;
  double t5180;
  double t5256;
  double t5272;
  double t5282;
  double t5310;
  double t5413;
  double t5436;
  double t5443;
  double t5447;
  double t6748;
  double t6750;
  double t6751;
  double t6753;
  double t6758;
  double t6763;
  double t6768;
  double t6778;
  double t6780;
  double t6781;
  double t6793;
  double t6794;
  double t5530;
  double t5531;
  double t5552;
  double t5557;
  double t5643;
  double t5651;
  double t5652;
  double t5709;
  double t5730;
  double t5781;
  double t5784;
  double t5797;
  double t5804;
  double t5812;
  double t6814;
  double t6817;
  double t6851;
  double t6856;
  double t6873;
  double t6877;
  double t6880;
  double t6884;
  double t6900;
  double t6904;
  double t6911;
  double t6912;
  double t5851;
  double t5853;
  double t5860;
  double t5861;
  double t5886;
  double t5921;
  double t5925;
  double t6022;
  double t6027;
  double t6032;
  double t6038;
  double t6053;
  double t6054;
  double t6055;
  double t6133;
  double t6926;
  double t6934;
  double t6950;
  double t6959;
  double t6163;
  double t6984;
  double t6992;
  double t6993;
  double t7013;
  double t6165;
  double t6169;
  double t7045;
  double t7053;
  double t7060;
  double t7062;
  double t6224;
  double t6237;
  double t6266;
  double t6275;
  double t6300;
  double t6335;
  double t6336;
  double t6368;
  double t7247;
  double t7248;
  double t7260;
  double t7264;
  double t7271;
  double t7272;
  double t7303;
  double t7304;
  double t7324;
  double t7328;
  double t7380;
  double t7394;
  double t7430;
  double t7439;
  double t7486;
  double t7495;
  double t7501;
  double t7509;
  double t7515;
  double t7529;
  double t7532;
  double t7538;
  double t7562;
  double t7570;
  double t7576;
  double t7585;
  double t7612;
  double t7617;
  double t7630;
  double t7638;
  double t7646;
  double t7653;
  double t7663;
  double t7675;
  double t7686;
  double t7698;
  double t7702;
  double t7713;
  double t7721;
  double t7744;
  double t7746;
  double t7789;
  double t7822;
  double t7827;
  double t7832;
  double t7842;
  double t7859;
  double t7885;
  double t7886;
  double t7888;
  double t7897;
  double t7903;
  double t7917;
  double t7926;
  double t7932;
  double t7963;
  double t7968;
  double t7974;
  double t8002;
  double t8003;
  double t8006;
  double t8013;
  double t8058;
  double t8075;
  double t8096;
  double t8109;
  double t8120;
  double t8126;
  double t8127;
  double t8139;
  double t8148;
  double t8161;
  double t8167;
  double t8168;
  double t8186;
  double t8187;
  double t8190;
  double t8197;
  t12 = Cos(var1[3]);
  t564 = Cos(var1[5]);
  t729 = Sin(var1[3]);
  t639 = Sin(var1[4]);
  t734 = Sin(var1[5]);
  t14 = Cos(var1[19]);
  t296 = -1.*t14;
  t370 = 1. + t296;
  t437 = Sin(var1[19]);
  t475 = Sin(var1[18]);
  t693 = t12*t564*t639;
  t917 = t729*t734;
  t939 = t693 + t917;
  t1187 = Cos(var1[18]);
  t1725 = -1.*t564*t729;
  t1748 = t12*t639*t734;
  t1752 = t1725 + t1748;
  t13 = Cos(var1[4]);
  t1857 = -1.*t475*t939;
  t1884 = t1187*t1752;
  t1887 = t1857 + t1884;
  t2046 = t1187*t939;
  t2054 = t475*t1752;
  t2060 = t2046 + t2054;
  t2126 = Cos(var1[20]);
  t2129 = -1.*t2126;
  t2134 = 1. + t2129;
  t2177 = Sin(var1[20]);
  t2347 = -0.366501*t12*t13*t437;
  t2369 = 0.340999127418*t370*t1887;
  t2372 = -0.134322983001*t370;
  t2389 = 1. + t2372;
  t2394 = t2389*t2060;
  t2429 = t2347 + t2369 + t2394;
  t2685 = 0.930418*t12*t13*t437;
  t2697 = -0.8656776547239999*t370;
  t2743 = 1. + t2697;
  t2755 = t2743*t1887;
  t2756 = 0.340999127418*t370*t2060;
  t2764 = t2685 + t2755 + t2756;
  t2894 = -1.000000637725*t370;
  t2895 = 1. + t2894;
  t2897 = t2895*t12*t13;
  t2939 = -0.930418*t437*t1887;
  t2987 = 0.366501*t437*t2060;
  t2991 = t2897 + t2939 + t2987;
  t3059 = Cos(var1[21]);
  t3206 = -1.*t3059;
  t3273 = 1. + t3206;
  t3275 = Sin(var1[21]);
  t3333 = 0.930418*t2177*t2429;
  t3335 = 0.366501*t2177*t2764;
  t3347 = -1.000000637725*t2134;
  t3348 = 1. + t3347;
  t3350 = t3348*t2991;
  t3376 = t3333 + t3335 + t3350;
  t3624 = -0.8656776547239999*t2134;
  t3625 = 1. + t3624;
  t3654 = t3625*t2429;
  t3680 = -0.340999127418*t2134*t2764;
  t3704 = -0.930418*t2177*t2991;
  t3706 = t3654 + t3680 + t3704;
  t3986 = -0.340999127418*t2134*t2429;
  t4002 = -0.134322983001*t2134;
  t4042 = 1. + t4002;
  t4043 = t4042*t2764;
  t4060 = -0.366501*t2177*t2991;
  t4062 = t3986 + t4043 + t4060;
  t4182 = Cos(var1[22]);
  t4186 = -1.*t4182;
  t4200 = 1. + t4186;
  t4395 = Sin(var1[22]);
  t4489 = 0.366501*t3275*t3376;
  t4500 = -0.340999127418*t3273*t3706;
  t4502 = -0.134322983001*t3273;
  t4513 = 1. + t4502;
  t4516 = t4513*t4062;
  t4517 = t4489 + t4500 + t4516;
  t4622 = 0.930418*t3275*t3376;
  t4660 = -0.8656776547239999*t3273;
  t4677 = 1. + t4660;
  t4682 = t4677*t3706;
  t4683 = -0.340999127418*t3273*t4062;
  t4685 = t4622 + t4682 + t4683;
  t4744 = -1.000000637725*t3273;
  t4755 = 1. + t4744;
  t4762 = t4755*t3376;
  t4791 = -0.930418*t3275*t3706;
  t4829 = -0.366501*t3275*t4062;
  t4856 = t4762 + t4791 + t4829;
  t4889 = Cos(var1[23]);
  t4959 = -1.*t4889;
  t4987 = 1. + t4959;
  t5039 = Sin(var1[23]);
  t5058 = -0.366501*t4395*t4517;
  t5060 = -0.930418*t4395*t4685;
  t5081 = -1.000000637725*t4200;
  t5125 = 1. + t5081;
  t5134 = t5125*t4856;
  t5149 = t5058 + t5060 + t5134;
  t5228 = -0.134322983001*t4200;
  t5232 = 1. + t5228;
  t5234 = t5232*t4517;
  t5236 = -0.340999127418*t4200*t4685;
  t5239 = 0.366501*t4395*t4856;
  t5248 = t5234 + t5236 + t5239;
  t5336 = -0.340999127418*t4200*t4517;
  t5347 = -0.8656776547239999*t4200;
  t5370 = 1. + t5347;
  t5376 = t5370*t4685;
  t5389 = 0.930418*t4395*t4856;
  t5402 = t5336 + t5376 + t5389;
  t5417 = Cos(var1[24]);
  t5423 = -1.*t5417;
  t5435 = 1. + t5423;
  t5441 = Sin(var1[24]);
  t5712 = Cos(var1[25]);
  t5717 = -1.*t5712;
  t5725 = 1. + t5717;
  t5745 = Sin(var1[25]);
  t5474 = 0.930418*t5039*t5149;
  t5477 = -0.340999127418*t4987*t5248;
  t5483 = -0.8656776547239999*t4987;
  t5484 = 1. + t5483;
  t5500 = t5484*t5402;
  t5512 = t5474 + t5477 + t5500;
  t5568 = 0.366501*t5039*t5149;
  t5579 = -0.134322983001*t4987;
  t5586 = 1. + t5579;
  t5590 = t5586*t5248;
  t5615 = -0.340999127418*t4987*t5402;
  t5625 = t5568 + t5590 + t5615;
  t5656 = -1.000000637725*t4987;
  t5667 = 1. + t5656;
  t5672 = t5667*t5149;
  t5681 = -0.366501*t5039*t5248;
  t5691 = -0.930418*t5039*t5402;
  t5696 = t5672 + t5681 + t5691;
  t5795 = -0.175248972904*t5725;
  t5876 = -0.120666640478*t5725;
  t5742 = -0.444895486988*t5725;
  t6045 = 0.218018*t5745;
  t5817 = -0.930418*t5441*t5512;
  t5823 = -0.366501*t5441*t5625;
  t5825 = -1.000000637725*t5435;
  t5826 = 1. + t5825;
  t5828 = t5826*t5696;
  t5833 = t5817 + t5823 + t5828;
  t6028 = -0.803828*t5745;
  t5953 = -0.340999127418*t5435*t5512;
  t5960 = -0.134322983001*t5435;
  t5969 = 1. + t5960;
  t5976 = t5969*t5625;
  t5981 = 0.366501*t5441*t5696;
  t5996 = t5953 + t5976 + t5981;
  t6064 = -0.8656776547239999*t5435;
  t6067 = 1. + t6064;
  t6069 = t6067*t5512;
  t6082 = -0.340999127418*t5435*t5625;
  t6087 = 0.930418*t5441*t5696;
  t6092 = t6069 + t6082 + t6087;
  t5796 = 0.553471*t5745;
  t6132 = 0.444895486988*t5725;
  t5779 = -0.218018*t5745;
  t6265 = 0.175248972904*t5725;
  t5854 = -0.553471*t5745;
  t6146 = 0.120666640478*t5725;
  t5879 = 0.803828*t5745;
  t373 = -0.04500040093286238*t370;
  t443 = 0.0846680539949003*t437;
  t449 = t373 + t443;
  t1371 = -1.*t1187;
  t1567 = 1. + t1371;
  t1786 = 1.296332362046933e-7*var1[19];
  t1816 = -0.07877668146182712*t370;
  t1843 = -0.04186915633414423*t437;
  t1856 = t1786 + t1816 + t1843;
  t6397 = t564*t729*t639;
  t6408 = -1.*t12*t734;
  t6417 = t6397 + t6408;
  t6424 = t12*t564;
  t6427 = t729*t639*t734;
  t6451 = t6424 + t6427;
  t1902 = 3.2909349868922137e-7*var1[19];
  t1921 = 0.03103092645718495*t370;
  t2026 = 0.016492681424499736*t437;
  t2039 = t1902 + t1921 + t2026;
  t2099 = -1.296332362046933e-7*var1[20];
  t2175 = -0.14128592423750855*t2134;
  t2179 = 0.04186915633414423*t2177;
  t2327 = t2099 + t2175 + t2179;
  t6484 = -1.*t475*t6417;
  t6489 = t1187*t6451;
  t6503 = t6484 + t6489;
  t6506 = t1187*t6417;
  t6507 = t475*t6451;
  t6523 = t6506 + t6507;
  t2615 = 3.2909349868922137e-7*var1[20];
  t2635 = -0.055653945343889656*t2134;
  t2656 = 0.016492681424499736*t2177;
  t2658 = t2615 + t2635 + t2656;
  t2888 = -0.04500040093286238*t2134;
  t2892 = -0.15185209683981668*t2177;
  t2893 = t2888 + t2892;
  t3274 = 0.039853038461262744*t3273;
  t3282 = 0.23670515095269612*t3275;
  t3312 = t3274 + t3282;
  t6535 = -0.366501*t13*t437*t729;
  t6542 = 0.340999127418*t370*t6503;
  t6557 = t2389*t6523;
  t6564 = t6535 + t6542 + t6557;
  t6568 = 0.930418*t13*t437*t729;
  t6569 = t2743*t6503;
  t6570 = 0.340999127418*t370*t6523;
  t6571 = t6568 + t6569 + t6570;
  t6583 = t2895*t13*t729;
  t6590 = -0.930418*t437*t6503;
  t6594 = 0.366501*t437*t6523;
  t6595 = t6583 + t6590 + t6594;
  t3480 = 6.295460977284962e-8*var1[21];
  t3554 = -0.22023473313910558*t3273;
  t3558 = 0.03707996069223323*t3275;
  t3619 = t3480 + t3554 + t3558;
  t3759 = -1.5981976069815686e-7*var1[21];
  t3880 = -0.08675267452931407*t3273;
  t3928 = 0.014606169134372047*t3275;
  t3931 = t3759 + t3880 + t3928;
  t4113 = -4.0833068682577724e-7*var1[22];
  t4208 = -0.11476729583292707*t4200;
  t4397 = 0.0111594154470601*t4395;
  t4406 = t4113 + t4208 + t4397;
  t6598 = 0.930418*t2177*t6564;
  t6605 = 0.366501*t2177*t6571;
  t6612 = t3348*t6595;
  t6617 = t6598 + t6605 + t6612;
  t6625 = t3625*t6564;
  t6630 = -0.340999127418*t2134*t6571;
  t6634 = -0.930418*t2177*t6595;
  t6637 = t6625 + t6630 + t6634;
  t6660 = -0.340999127418*t2134*t6564;
  t6667 = t4042*t6571;
  t6668 = -0.366501*t2177*t6595;
  t6671 = t6660 + t6667 + t6668;
  t4569 = 1.6084556086870008e-7*var1[22];
  t4605 = -0.29135406957765553*t4200;
  t4606 = 0.02832985722118838*t4395;
  t4610 = t4569 + t4605 + t4606;
  t4725 = 0.03044854601678662*t4200;
  t4730 = 0.3131431996991197*t4395;
  t4733 = t4725 + t4730;
  t5000 = -0.26285954081199375*t4987;
  t5042 = 0.634735404786378*t5039;
  t5046 = t5000 + t5042;
  t6682 = 0.366501*t3275*t6617;
  t6687 = -0.340999127418*t3273*t6637;
  t6688 = t4513*t6671;
  t6695 = t6682 + t6687 + t6688;
  t6708 = 0.930418*t3275*t6617;
  t6711 = t4677*t6637;
  t6712 = -0.340999127418*t3273*t6671;
  t6729 = t6708 + t6711 + t6712;
  t6740 = t4755*t6617;
  t6741 = -0.930418*t3275*t6637;
  t6743 = -0.366501*t3275*t6671;
  t6744 = t6740 + t6741 + t6743;
  t5162 = 1.6169269214444473e-7*var1[23];
  t5167 = -0.2326311605896123*t4987;
  t5170 = -0.09633822312984319*t5039;
  t5180 = t5162 + t5167 + t5170;
  t5256 = -6.369237629068993e-8*var1[23];
  t5272 = -0.5905692458505322*t4987;
  t5282 = -0.24456909227538925*t5039;
  t5310 = t5256 + t5272 + t5282;
  t5413 = -7.041766963257243e-8*var1[24];
  t5436 = -0.8232948486053725*t5435;
  t5443 = 0.05763710717422546*t5441;
  t5447 = t5413 + t5436 + t5443;
  t6748 = -0.366501*t4395*t6695;
  t6750 = -0.930418*t4395*t6729;
  t6751 = t5125*t6744;
  t6753 = t6748 + t6750 + t6751;
  t6758 = t5232*t6695;
  t6763 = -0.340999127418*t4200*t6729;
  t6768 = 0.366501*t4395*t6744;
  t6778 = t6758 + t6763 + t6768;
  t6780 = -0.340999127418*t4200*t6695;
  t6781 = t5370*t6729;
  t6793 = 0.930418*t4395*t6744;
  t6794 = t6780 + t6781 + t6793;
  t5530 = 1.7876586242383724e-7*var1[24];
  t5531 = -0.3243041141817093*t5435;
  t5552 = 0.02270383571304597*t5441;
  t5557 = t5530 + t5531 + t5552;
  t5643 = 0.06194758047549556*t5435;
  t5651 = 0.8848655643005321*t5441;
  t5652 = t5643 + t5651;
  t5709 = 2.7989049814696287e-7*var1[25];
  t5730 = 0.15748067958019524*t5725;
  t5781 = t5742 + t5779;
  t5784 = -0.528674719304*t5781;
  t5797 = t5795 + t5796;
  t5804 = -0.29871295412*t5797;
  t5812 = t5709 + t5730 + t5784 + t5804;
  t6814 = 0.930418*t5039*t6753;
  t6817 = -0.340999127418*t4987*t6778;
  t6851 = t5484*t6794;
  t6856 = t6814 + t6817 + t6851;
  t6873 = 0.366501*t5039*t6753;
  t6877 = t5586*t6778;
  t6880 = -0.340999127418*t4987*t6794;
  t6884 = t6873 + t6877 + t6880;
  t6900 = t5667*t6753;
  t6904 = -0.366501*t5039*t6778;
  t6911 = -0.930418*t5039*t6794;
  t6912 = t6900 + t6904 + t6911;
  t5851 = 7.591321355439789e-8*var1[25];
  t5853 = -0.2845150083511607*t5725;
  t5860 = t5795 + t5854;
  t5861 = 0.445034169498*t5860;
  t5886 = t5876 + t5879;
  t5921 = -0.528674719304*t5886;
  t5925 = t5851 + t5853 + t5861 + t5921;
  t6022 = 1.9271694180831932e-7*var1[25];
  t6027 = -0.3667264808254521*t5725;
  t6032 = t5876 + t6028;
  t6038 = -0.29871295412*t6032;
  t6053 = t5742 + t6045;
  t6054 = 0.445034169498*t6053;
  t6055 = t6022 + t6027 + t6038 + t6054;
  t6133 = t6132 + t6045;
  t6926 = -0.930418*t5441*t6856;
  t6934 = -0.366501*t5441*t6884;
  t6950 = t5826*t6912;
  t6959 = t6926 + t6934 + t6950;
  t6163 = t6146 + t6028;
  t6984 = -0.340999127418*t5435*t6856;
  t6992 = t5969*t6884;
  t6993 = 0.366501*t5441*t6912;
  t7013 = t6984 + t6992 + t6993;
  t6165 = -0.693671301908*t5725;
  t6169 = 1. + t6165;
  t7045 = t6067*t6856;
  t7053 = -0.340999127418*t5435*t6884;
  t7060 = 0.930418*t5441*t6912;
  t7062 = t7045 + t7053 + t7060;
  t6224 = -0.353861996165*t5725;
  t6237 = 1. + t6224;
  t6266 = t6265 + t5796;
  t6275 = t6132 + t5779;
  t6300 = t6265 + t5854;
  t6335 = -0.952469601425*t5725;
  t6336 = 1. + t6335;
  t6368 = t6146 + t5879;
  t7247 = -1.*t13*t564*t475;
  t7248 = t1187*t13*t734;
  t7260 = t7247 + t7248;
  t7264 = t1187*t13*t564;
  t7271 = t13*t475*t734;
  t7272 = t7264 + t7271;
  t7303 = 0.366501*t437*t639;
  t7304 = 0.340999127418*t370*t7260;
  t7324 = t2389*t7272;
  t7328 = t7303 + t7304 + t7324;
  t7380 = -0.930418*t437*t639;
  t7394 = t2743*t7260;
  t7430 = 0.340999127418*t370*t7272;
  t7439 = t7380 + t7394 + t7430;
  t7486 = -1.*t2895*t639;
  t7495 = -0.930418*t437*t7260;
  t7501 = 0.366501*t437*t7272;
  t7509 = t7486 + t7495 + t7501;
  t7515 = 0.930418*t2177*t7328;
  t7529 = 0.366501*t2177*t7439;
  t7532 = t3348*t7509;
  t7538 = t7515 + t7529 + t7532;
  t7562 = t3625*t7328;
  t7570 = -0.340999127418*t2134*t7439;
  t7576 = -0.930418*t2177*t7509;
  t7585 = t7562 + t7570 + t7576;
  t7612 = -0.340999127418*t2134*t7328;
  t7617 = t4042*t7439;
  t7630 = -0.366501*t2177*t7509;
  t7638 = t7612 + t7617 + t7630;
  t7646 = 0.366501*t3275*t7538;
  t7653 = -0.340999127418*t3273*t7585;
  t7663 = t4513*t7638;
  t7675 = t7646 + t7653 + t7663;
  t7686 = 0.930418*t3275*t7538;
  t7698 = t4677*t7585;
  t7702 = -0.340999127418*t3273*t7638;
  t7713 = t7686 + t7698 + t7702;
  t7721 = t4755*t7538;
  t7744 = -0.930418*t3275*t7585;
  t7746 = -0.366501*t3275*t7638;
  t7789 = t7721 + t7744 + t7746;
  t7822 = -0.366501*t4395*t7675;
  t7827 = -0.930418*t4395*t7713;
  t7832 = t5125*t7789;
  t7842 = t7822 + t7827 + t7832;
  t7859 = t5232*t7675;
  t7885 = -0.340999127418*t4200*t7713;
  t7886 = 0.366501*t4395*t7789;
  t7888 = t7859 + t7885 + t7886;
  t7897 = -0.340999127418*t4200*t7675;
  t7903 = t5370*t7713;
  t7917 = 0.930418*t4395*t7789;
  t7926 = t7897 + t7903 + t7917;
  t7932 = 0.930418*t5039*t7842;
  t7963 = -0.340999127418*t4987*t7888;
  t7968 = t5484*t7926;
  t7974 = t7932 + t7963 + t7968;
  t8002 = 0.366501*t5039*t7842;
  t8003 = t5586*t7888;
  t8006 = -0.340999127418*t4987*t7926;
  t8013 = t8002 + t8003 + t8006;
  t8058 = t5667*t7842;
  t8075 = -0.366501*t5039*t7888;
  t8096 = -0.930418*t5039*t7926;
  t8109 = t8058 + t8075 + t8096;
  t8120 = -0.930418*t5441*t7974;
  t8126 = -0.366501*t5441*t8013;
  t8127 = t5826*t8109;
  t8139 = t8120 + t8126 + t8127;
  t8148 = -0.340999127418*t5435*t7974;
  t8161 = t5969*t8013;
  t8167 = 0.366501*t5441*t8109;
  t8168 = t8148 + t8161 + t8167;
  t8186 = t6067*t7974;
  t8187 = -0.340999127418*t5435*t8013;
  t8190 = 0.930418*t5441*t8109;
  t8197 = t8186 + t8187 + t8190;
  p_output1[0]=-0.091*t1567*t1752 + t1856*t1887 + t2039*t2060 + t2327*t2429 + t2658*t2764 + t2893*t2991 + t3312*t3376 + t3619*t3706 + t3931*t4062 + t12*t13*t449 + t4406*t4517 + t4610*t4685 + t4733*t4856 + t5046*t5149 + t5180*t5248 + t5310*t5402 + t5447*t5512 + t5557*t5625 + t5652*t5696 + t5812*t5833 + t5925*t5996 + t6055*t6092 - 0.850685*(t5833*t6133 + t5996*t6163 + t6092*t6169) + 0.069082*(t5833*t6237 + t5996*t6266 + t6092*t6275) - 0.425556*(t5833*t6300 + t5996*t6336 + t6092*t6368) - 0.091*t475*t939 + var1[0];
  p_output1[1]=-0.091*t475*t6417 - 0.091*t1567*t6451 + t1856*t6503 + t2039*t6523 + t2327*t6564 + t2658*t6571 + t2893*t6595 + t3312*t6617 + t3619*t6637 + t3931*t6671 + t4406*t6695 + t4610*t6729 + t4733*t6744 + t5046*t6753 + t5180*t6778 + t5310*t6794 + t5447*t6856 + t5557*t6884 + t5652*t6912 + t5812*t6959 + t5925*t7013 + t6055*t7062 - 0.850685*(t6133*t6959 + t6163*t7013 + t6169*t7062) + 0.069082*(t6237*t6959 + t6266*t7013 + t6275*t7062) - 0.425556*(t6300*t6959 + t6336*t7013 + t6368*t7062) + t13*t449*t729 + var1[1];
  p_output1[2]=-0.091*t13*t475*t564 - 1.*t449*t639 + t1856*t7260 + t2039*t7272 + t2327*t7328 - 0.091*t13*t1567*t734 + t2658*t7439 + t2893*t7509 + t3312*t7538 + t3619*t7585 + t3931*t7638 + t4406*t7675 + t4610*t7713 + t4733*t7789 + t5046*t7842 + t5180*t7888 + t5310*t7926 + t5447*t7974 + t5557*t8013 + t5652*t8109 + t5812*t8139 + t5925*t8168 + t6055*t8197 - 0.850685*(t6133*t8139 + t6163*t8168 + t6169*t8197) + 0.069082*(t6237*t8139 + t6266*t8168 + t6275*t8197) - 0.425556*(t6300*t8139 + t6336*t8168 + t6368*t8197) + var1[2];
}



void gen::kin::p_RightToeMid(Eigen::Ref<Eigen::VectorXd> p_output1, const Eigen::Ref<const Eigen::VectorXd> var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
