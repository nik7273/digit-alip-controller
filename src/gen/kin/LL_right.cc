/*
 * Automatically Generated from Mathematica.
 * Wed 12 Jan 2022 01:57:41 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <eigen3/Eigen/Dense>

#include "gen/kin/LL_right.hh"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

INLINE double Sec(double x) { return 1/cos(x); }
INLINE double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(Eigen::Ref<Eigen::VectorXd> p_output1,const Eigen::Ref<const Eigen::VectorXd> var1)
{
  double t27;
  double t24;
  double t25;
  double t26;
  double t33;
  double t28;
  double t29;
  double t34;
  double t16;
  double t18;
  double t22;
  double t30;
  double t35;
  double t36;
  double t42;
  double t43;
  double t44;
  double t23;
  double t37;
  double t38;
  double t39;
  double t45;
  double t47;
  double t51;
  double t52;
  double t53;
  double t55;
  double t58;
  double t59;
  double t60;
  double t62;
  double t63;
  double t64;
  double t65;
  double t67;
  double t68;
  double t71;
  double t72;
  double t74;
  double t75;
  double t76;
  double t77;
  double t79;
  double t80;
  double t85;
  double t86;
  double t88;
  double t92;
  double t97;
  double t99;
  double t102;
  double t103;
  double t105;
  double t106;
  double t120;
  double t121;
  double t123;
  double t124;
  double t127;
  double t129;
  double t141;
  double t142;
  double t143;
  double t148;
  double t152;
  double t156;
  double t157;
  double t158;
  double t160;
  double t161;
  double t171;
  double t174;
  double t175;
  double t177;
  double t178;
  double t179;
  double t188;
  double t189;
  double t192;
  double t193;
  double t194;
  double t195;
  double t199;
  double t200;
  double t201;
  double t205;
  double t208;
  double t209;
  double t210;
  double t212;
  double t215;
  double t216;
  double t224;
  double t225;
  double t226;
  double t227;
  double t228;
  double t229;
  double t235;
  double t236;
  double t237;
  double t238;
  double t239;
  double t241;
  double t244;
  double t245;
  double t247;
  double t249;
  double t253;
  double t254;
  double t255;
  double t256;
  double t257;
  double t259;
  double t266;
  double t267;
  double t269;
  double t270;
  double t271;
  double t272;
  double t279;
  double t280;
  double t281;
  double t282;
  double t284;
  double t285;
  double t313;
  double t316;
  double t315;
  double t317;
  double t318;
  double t320;
  double t321;
  double t322;
  double t319;
  double t326;
  double t327;
  double t329;
  double t330;
  double t331;
  double t89;
  double t94;
  double t95;
  double t314;
  double t328;
  double t332;
  double t333;
  double t334;
  double t335;
  double t336;
  double t337;
  double t338;
  double t339;
  double t340;
  double t341;
  double t342;
  double t343;
  double t345;
  double t346;
  double t111;
  double t112;
  double t113;
  double t115;
  double t349;
  double t351;
  double t352;
  double t353;
  double t131;
  double t132;
  double t136;
  double t137;
  double t357;
  double t358;
  double t359;
  double t360;
  double t140;
  double t145;
  double t149;
  double t151;
  double t166;
  double t167;
  double t168;
  double t169;
  double t184;
  double t185;
  double t187;
  double t204;
  double t206;
  double t207;
  double t364;
  double t365;
  double t366;
  double t368;
  double t370;
  double t371;
  double t373;
  double t374;
  double t376;
  double t378;
  double t379;
  double t380;
  double t218;
  double t219;
  double t222;
  double t223;
  double t231;
  double t232;
  double t233;
  double t234;
  double t243;
  double t248;
  double t250;
  double t251;
  double t383;
  double t384;
  double t385;
  double t386;
  double t389;
  double t390;
  double t391;
  double t393;
  double t395;
  double t396;
  double t398;
  double t399;
  double t261;
  double t262;
  double t264;
  double t265;
  double t275;
  double t276;
  double t277;
  double t401;
  double t403;
  double t404;
  double t405;
  double t407;
  double t408;
  double t409;
  double t410;
  double t290;
  double t291;
  double t412;
  double t413;
  double t414;
  double t415;
  double t297;
  double t299;
  double t304;
  double t305;
  double t435;
  double t436;
  double t437;
  double t439;
  double t440;
  double t441;
  double t438;
  double t442;
  double t443;
  double t445;
  double t446;
  double t447;
  double t434;
  double t444;
  double t448;
  double t449;
  double t450;
  double t451;
  double t452;
  double t453;
  double t454;
  double t455;
  double t456;
  double t457;
  double t458;
  double t459;
  double t460;
  double t461;
  double t464;
  double t465;
  double t466;
  double t467;
  double t470;
  double t471;
  double t472;
  double t473;
  double t476;
  double t477;
  double t478;
  double t479;
  double t481;
  double t482;
  double t483;
  double t484;
  double t486;
  double t487;
  double t488;
  double t489;
  double t491;
  double t492;
  double t493;
  double t494;
  double t496;
  double t497;
  double t498;
  double t499;
  double t501;
  double t502;
  double t503;
  double t504;
  double t506;
  double t507;
  double t508;
  double t509;
  double t511;
  double t512;
  double t513;
  double t514;
  double t516;
  double t517;
  double t518;
  double t519;
  t27 = Cos(var1[4]);
  t24 = Cos(var1[19]);
  t25 = -1.*t24;
  t26 = 1. + t25;
  t33 = Cos(var1[18]);
  t28 = Cos(var1[5]);
  t29 = Sin(var1[18]);
  t34 = Sin(var1[5]);
  t16 = Sin(var1[20]);
  t18 = Sin(var1[19]);
  t22 = Sin(var1[4]);
  t30 = -1.*t27*t28*t29;
  t35 = t33*t27*t34;
  t36 = t30 + t35;
  t42 = t33*t27*t28;
  t43 = t27*t29*t34;
  t44 = t42 + t43;
  t23 = 0.366501*t18*t22;
  t37 = 0.340999127418*t26*t36;
  t38 = -0.134322983001*t26;
  t39 = 1. + t38;
  t45 = t39*t44;
  t47 = t23 + t37 + t45;
  t51 = 0.930418*t16*t47;
  t52 = -0.930418*t18*t22;
  t53 = -0.8656776547239999*t26;
  t55 = 1. + t53;
  t58 = t55*t36;
  t59 = 0.340999127418*t26*t44;
  t60 = t52 + t58 + t59;
  t62 = 0.366501*t16*t60;
  t63 = Cos(var1[20]);
  t64 = -1.*t63;
  t65 = 1. + t64;
  t67 = -1.000000637725*t65;
  t68 = 1. + t67;
  t71 = -1.000000637725*t26;
  t72 = 1. + t71;
  t74 = -1.*t72*t22;
  t75 = -0.930418*t18*t36;
  t76 = 0.366501*t18*t44;
  t77 = t74 + t75 + t76;
  t79 = t68*t77;
  t80 = t51 + t62 + t79;
  t85 = Cos(var1[21]);
  t86 = -1.*t85;
  t88 = 1. + t86;
  t92 = Sin(var1[21]);
  t97 = -0.8656776547239999*t65;
  t99 = 1. + t97;
  t102 = t99*t47;
  t103 = -0.340999127418*t65*t60;
  t105 = -0.930418*t16*t77;
  t106 = t102 + t103 + t105;
  t120 = -0.340999127418*t65*t47;
  t121 = -0.134322983001*t65;
  t123 = 1. + t121;
  t124 = t123*t60;
  t127 = -0.366501*t16*t77;
  t129 = t120 + t124 + t127;
  t141 = Cos(var1[22]);
  t142 = -1.*t141;
  t143 = 1. + t142;
  t148 = Sin(var1[22]);
  t152 = 0.366501*t92*t80;
  t156 = -0.340999127418*t88*t106;
  t157 = -0.134322983001*t88;
  t158 = 1. + t157;
  t160 = t158*t129;
  t161 = t152 + t156 + t160;
  t171 = 0.930418*t92*t80;
  t174 = -0.8656776547239999*t88;
  t175 = 1. + t174;
  t177 = t175*t106;
  t178 = -0.340999127418*t88*t129;
  t179 = t171 + t177 + t178;
  t188 = -1.000000637725*t88;
  t189 = 1. + t188;
  t192 = t189*t80;
  t193 = -0.930418*t92*t106;
  t194 = -0.366501*t92*t129;
  t195 = t192 + t193 + t194;
  t199 = Cos(var1[23]);
  t200 = -1.*t199;
  t201 = 1. + t200;
  t205 = Sin(var1[23]);
  t208 = -0.366501*t148*t161;
  t209 = -0.930418*t148*t179;
  t210 = -1.000000637725*t143;
  t212 = 1. + t210;
  t215 = t212*t195;
  t216 = t208 + t209 + t215;
  t224 = -0.134322983001*t143;
  t225 = 1. + t224;
  t226 = t225*t161;
  t227 = -0.340999127418*t143*t179;
  t228 = 0.366501*t148*t195;
  t229 = t226 + t227 + t228;
  t235 = -0.340999127418*t143*t161;
  t236 = -0.8656776547239999*t143;
  t237 = 1. + t236;
  t238 = t237*t179;
  t239 = 0.930418*t148*t195;
  t241 = t235 + t238 + t239;
  t244 = Cos(var1[24]);
  t245 = -1.*t244;
  t247 = 1. + t245;
  t249 = Sin(var1[24]);
  t253 = 0.930418*t205*t216;
  t254 = -0.340999127418*t201*t229;
  t255 = -0.8656776547239999*t201;
  t256 = 1. + t255;
  t257 = t256*t241;
  t259 = t253 + t254 + t257;
  t266 = 0.366501*t205*t216;
  t267 = -0.134322983001*t201;
  t269 = 1. + t267;
  t270 = t269*t229;
  t271 = -0.340999127418*t201*t241;
  t272 = t266 + t270 + t271;
  t279 = -1.000000637725*t201;
  t280 = 1. + t279;
  t281 = t280*t216;
  t282 = -0.366501*t205*t229;
  t284 = -0.930418*t205*t241;
  t285 = t281 + t282 + t284;
  t313 = Cos(var1[3]);
  t316 = Sin(var1[3]);
  t315 = t313*t28*t22;
  t317 = t316*t34;
  t318 = t315 + t317;
  t320 = -1.*t28*t316;
  t321 = t313*t22*t34;
  t322 = t320 + t321;
  t319 = -1.*t29*t318;
  t326 = t33*t322;
  t327 = t319 + t326;
  t329 = t33*t318;
  t330 = t29*t322;
  t331 = t329 + t330;
  t89 = 0.039853038461262744*t88;
  t94 = 0.23670515095269612*t92;
  t95 = t89 + t94;
  t314 = -0.366501*t313*t27*t18;
  t328 = 0.340999127418*t26*t327;
  t332 = t39*t331;
  t333 = t314 + t328 + t332;
  t334 = 0.930418*t16*t333;
  t335 = 0.930418*t313*t27*t18;
  t336 = t55*t327;
  t337 = 0.340999127418*t26*t331;
  t338 = t335 + t336 + t337;
  t339 = 0.366501*t16*t338;
  t340 = t72*t313*t27;
  t341 = -0.930418*t18*t327;
  t342 = 0.366501*t18*t331;
  t343 = t340 + t341 + t342;
  t345 = t68*t343;
  t346 = t334 + t339 + t345;
  t111 = 6.295460977284962e-8*var1[21];
  t112 = -0.22023473313910558*t88;
  t113 = 0.03707996069223323*t92;
  t115 = t111 + t112 + t113;
  t349 = t99*t333;
  t351 = -0.340999127418*t65*t338;
  t352 = -0.930418*t16*t343;
  t353 = t349 + t351 + t352;
  t131 = -1.5981976069815686e-7*var1[21];
  t132 = -0.08675267452931407*t88;
  t136 = 0.014606169134372047*t92;
  t137 = t131 + t132 + t136;
  t357 = -0.340999127418*t65*t333;
  t358 = t123*t338;
  t359 = -0.366501*t16*t343;
  t360 = t357 + t358 + t359;
  t140 = -4.0833068682577724e-7*var1[22];
  t145 = -0.11476729583292707*t143;
  t149 = 0.0111594154470601*t148;
  t151 = t140 + t145 + t149;
  t166 = 1.6084556086870008e-7*var1[22];
  t167 = -0.29135406957765553*t143;
  t168 = 0.02832985722118838*t148;
  t169 = t166 + t167 + t168;
  t184 = 0.03044854601678662*t143;
  t185 = 0.3131431996991197*t148;
  t187 = t184 + t185;
  t204 = -0.26285954081199375*t201;
  t206 = 0.634735404786378*t205;
  t207 = t204 + t206;
  t364 = 0.366501*t92*t346;
  t365 = -0.340999127418*t88*t353;
  t366 = t158*t360;
  t368 = t364 + t365 + t366;
  t370 = 0.930418*t92*t346;
  t371 = t175*t353;
  t373 = -0.340999127418*t88*t360;
  t374 = t370 + t371 + t373;
  t376 = t189*t346;
  t378 = -0.930418*t92*t353;
  t379 = -0.366501*t92*t360;
  t380 = t376 + t378 + t379;
  t218 = 1.6169269214444473e-7*var1[23];
  t219 = -0.2326311605896123*t201;
  t222 = -0.09633822312984319*t205;
  t223 = t218 + t219 + t222;
  t231 = -6.369237629068993e-8*var1[23];
  t232 = -0.5905692458505322*t201;
  t233 = -0.24456909227538925*t205;
  t234 = t231 + t232 + t233;
  t243 = -7.041766963257243e-8*var1[24];
  t248 = -0.8232948486053725*t247;
  t250 = 0.05763710717422546*t249;
  t251 = t243 + t248 + t250;
  t383 = -0.366501*t148*t368;
  t384 = -0.930418*t148*t374;
  t385 = t212*t380;
  t386 = t383 + t384 + t385;
  t389 = t225*t368;
  t390 = -0.340999127418*t143*t374;
  t391 = 0.366501*t148*t380;
  t393 = t389 + t390 + t391;
  t395 = -0.340999127418*t143*t368;
  t396 = t237*t374;
  t398 = 0.930418*t148*t380;
  t399 = t395 + t396 + t398;
  t261 = 1.7876586242383724e-7*var1[24];
  t262 = -0.3243041141817093*t247;
  t264 = 0.02270383571304597*t249;
  t265 = t261 + t262 + t264;
  t275 = 0.06194758047549556*t247;
  t276 = 0.8848655643005321*t249;
  t277 = t275 + t276;
  t401 = 0.930418*t205*t386;
  t403 = -0.340999127418*t201*t393;
  t404 = t256*t399;
  t405 = t401 + t403 + t404;
  t407 = 0.366501*t205*t386;
  t408 = t269*t393;
  t409 = -0.340999127418*t201*t399;
  t410 = t407 + t408 + t409;
  t290 = -1.000000637725*t247;
  t291 = 1. + t290;
  t412 = t280*t386;
  t413 = -0.366501*t205*t393;
  t414 = -0.930418*t205*t399;
  t415 = t412 + t413 + t414;
  t297 = -0.134322983001*t247;
  t299 = 1. + t297;
  t304 = -0.8656776547239999*t247;
  t305 = 1. + t304;
  t435 = t28*t316*t22;
  t436 = -1.*t313*t34;
  t437 = t435 + t436;
  t439 = t313*t28;
  t440 = t316*t22*t34;
  t441 = t439 + t440;
  t438 = -1.*t29*t437;
  t442 = t33*t441;
  t443 = t438 + t442;
  t445 = t33*t437;
  t446 = t29*t441;
  t447 = t445 + t446;
  t434 = -0.366501*t27*t18*t316;
  t444 = 0.340999127418*t26*t443;
  t448 = t39*t447;
  t449 = t434 + t444 + t448;
  t450 = 0.930418*t16*t449;
  t451 = 0.930418*t27*t18*t316;
  t452 = t55*t443;
  t453 = 0.340999127418*t26*t447;
  t454 = t451 + t452 + t453;
  t455 = 0.366501*t16*t454;
  t456 = t72*t27*t316;
  t457 = -0.930418*t18*t443;
  t458 = 0.366501*t18*t447;
  t459 = t456 + t457 + t458;
  t460 = t68*t459;
  t461 = t450 + t455 + t460;
  t464 = t99*t449;
  t465 = -0.340999127418*t65*t454;
  t466 = -0.930418*t16*t459;
  t467 = t464 + t465 + t466;
  t470 = -0.340999127418*t65*t449;
  t471 = t123*t454;
  t472 = -0.366501*t16*t459;
  t473 = t470 + t471 + t472;
  t476 = 0.366501*t92*t461;
  t477 = -0.340999127418*t88*t467;
  t478 = t158*t473;
  t479 = t476 + t477 + t478;
  t481 = 0.930418*t92*t461;
  t482 = t175*t467;
  t483 = -0.340999127418*t88*t473;
  t484 = t481 + t482 + t483;
  t486 = t189*t461;
  t487 = -0.930418*t92*t467;
  t488 = -0.366501*t92*t473;
  t489 = t486 + t487 + t488;
  t491 = -0.366501*t148*t479;
  t492 = -0.930418*t148*t484;
  t493 = t212*t489;
  t494 = t491 + t492 + t493;
  t496 = t225*t479;
  t497 = -0.340999127418*t143*t484;
  t498 = 0.366501*t148*t489;
  t499 = t496 + t497 + t498;
  t501 = -0.340999127418*t143*t479;
  t502 = t237*t484;
  t503 = 0.930418*t148*t489;
  t504 = t501 + t502 + t503;
  t506 = 0.930418*t205*t494;
  t507 = -0.340999127418*t201*t499;
  t508 = t256*t504;
  t509 = t506 + t507 + t508;
  t511 = 0.366501*t205*t494;
  t512 = t269*t499;
  t513 = -0.340999127418*t201*t504;
  t514 = t511 + t512 + t513;
  t516 = t280*t494;
  t517 = -0.366501*t205*t499;
  t518 = -0.930418*t205*t504;
  t519 = t516 + t517 + t518;
  p_output1[0]=Sqrt(Power(0. - 0.045*t346 - 0.108789*t353 - 1.*t115*t353 - 0.138152*t360 - 1.*t137*t360 - 1.*t151*t368 - 1.*t169*t374 - 1.*t187*t380 - 1.*t207*t386 - 1.*t223*t393 - 1.*t234*t399 - 1.*t251*t405 - 1.*t265*t410 - 1.*t277*t415 + 0.402615*(-0.340999127418*t247*t405 + t299*t410 + 0.366501*t249*t415) + 0.792446*(t305*t405 - 0.340999127418*t247*t410 + 0.930418*t249*t415) - 0.061947*(-0.930418*t249*t405 - 0.366501*t249*t410 + t291*t415) - 1.*t346*t95,2) + Power(0. - 0.045*t461 - 0.108789*t467 - 1.*t115*t467 - 0.138152*t473 - 1.*t137*t473 - 1.*t151*t479 - 1.*t169*t484 - 1.*t187*t489 - 1.*t207*t494 - 1.*t223*t499 - 1.*t234*t504 - 1.*t251*t509 - 1.*t265*t514 - 1.*t277*t519 + 0.402615*(-0.340999127418*t247*t509 + t299*t514 + 0.366501*t249*t519) + 0.792446*(t305*t509 - 0.340999127418*t247*t514 + 0.930418*t249*t519) - 0.061947*(-0.930418*t249*t509 - 0.366501*t249*t514 + t291*t519) - 1.*t461*t95,2) + Power(0. - 0.108789*t106 - 1.*t106*t115 - 0.138152*t129 - 1.*t129*t137 - 1.*t151*t161 - 1.*t169*t179 - 1.*t187*t195 - 1.*t207*t216 - 1.*t223*t229 - 1.*t234*t241 - 1.*t251*t259 - 1.*t265*t272 - 1.*t277*t285 - 0.061947*(-0.930418*t249*t259 - 0.366501*t249*t272 + t285*t291) + 0.402615*(-0.340999127418*t247*t259 + 0.366501*t249*t285 + t272*t299) + 0.792446*(-0.340999127418*t247*t272 + 0.930418*t249*t285 + t259*t305) - 0.045*t80 - 1.*t80*t95,2));
}



void gen::kin::LL_right(Eigen::Ref<Eigen::VectorXd> p_output1, const Eigen::Ref<const Eigen::VectorXd> var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
