/*
 * Automatically Generated from Mathematica.
 * Wed 12 Jan 2022 01:57:40 GMT-05:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <eigen3/Eigen/Dense>

#include "gen/kin/LL_left.hh"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

INLINE double Sec(double x) { return 1/cos(x); }
INLINE double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(Eigen::Ref<Eigen::VectorXd> p_output1,const Eigen::Ref<const Eigen::VectorXd> var1)
{
  double t15;
  double t19;
  double t16;
  double t17;
  double t20;
  double t23;
  double t8;
  double t9;
  double t10;
  double t18;
  double t21;
  double t22;
  double t25;
  double t26;
  double t27;
  double t13;
  double t37;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t11;
  double t12;
  double t14;
  double t24;
  double t28;
  double t29;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t35;
  double t36;
  double t38;
  double t39;
  double t40;
  double t41;
  double t42;
  double t43;
  double t44;
  double t45;
  double t46;
  double t48;
  double t49;
  double t50;
  double t52;
  double t56;
  double t57;
  double t58;
  double t59;
  double t60;
  double t61;
  double t68;
  double t69;
  double t70;
  double t71;
  double t72;
  double t73;
  double t81;
  double t82;
  double t83;
  double t85;
  double t88;
  double t89;
  double t90;
  double t91;
  double t92;
  double t93;
  double t99;
  double t100;
  double t101;
  double t102;
  double t103;
  double t104;
  double t109;
  double t110;
  double t111;
  double t112;
  double t113;
  double t114;
  double t116;
  double t117;
  double t118;
  double t120;
  double t123;
  double t124;
  double t125;
  double t126;
  double t127;
  double t128;
  double t134;
  double t135;
  double t136;
  double t137;
  double t138;
  double t139;
  double t145;
  double t146;
  double t147;
  double t148;
  double t149;
  double t150;
  double t153;
  double t154;
  double t155;
  double t157;
  double t160;
  double t161;
  double t162;
  double t163;
  double t164;
  double t165;
  double t171;
  double t172;
  double t173;
  double t174;
  double t175;
  double t176;
  double t181;
  double t182;
  double t183;
  double t184;
  double t185;
  double t186;
  double t211;
  double t213;
  double t218;
  double t219;
  double t220;
  double t214;
  double t215;
  double t216;
  double t217;
  double t221;
  double t222;
  double t224;
  double t225;
  double t226;
  double t51;
  double t53;
  double t54;
  double t212;
  double t223;
  double t227;
  double t228;
  double t229;
  double t230;
  double t231;
  double t232;
  double t233;
  double t234;
  double t235;
  double t236;
  double t237;
  double t238;
  double t239;
  double t240;
  double t63;
  double t64;
  double t65;
  double t66;
  double t243;
  double t244;
  double t245;
  double t246;
  double t75;
  double t76;
  double t77;
  double t78;
  double t249;
  double t250;
  double t251;
  double t252;
  double t80;
  double t84;
  double t86;
  double t87;
  double t95;
  double t96;
  double t97;
  double t98;
  double t106;
  double t107;
  double t108;
  double t119;
  double t121;
  double t122;
  double t255;
  double t256;
  double t257;
  double t258;
  double t260;
  double t261;
  double t262;
  double t263;
  double t265;
  double t266;
  double t267;
  double t268;
  double t130;
  double t131;
  double t132;
  double t133;
  double t141;
  double t142;
  double t143;
  double t144;
  double t152;
  double t156;
  double t158;
  double t159;
  double t270;
  double t271;
  double t272;
  double t273;
  double t275;
  double t276;
  double t277;
  double t278;
  double t280;
  double t281;
  double t282;
  double t283;
  double t167;
  double t168;
  double t169;
  double t170;
  double t178;
  double t179;
  double t180;
  double t285;
  double t286;
  double t287;
  double t288;
  double t290;
  double t291;
  double t292;
  double t293;
  double t190;
  double t191;
  double t295;
  double t296;
  double t297;
  double t298;
  double t196;
  double t197;
  double t202;
  double t203;
  double t322;
  double t323;
  double t324;
  double t318;
  double t319;
  double t320;
  double t321;
  double t325;
  double t326;
  double t328;
  double t329;
  double t330;
  double t317;
  double t327;
  double t331;
  double t332;
  double t333;
  double t334;
  double t335;
  double t336;
  double t337;
  double t338;
  double t339;
  double t340;
  double t341;
  double t342;
  double t343;
  double t344;
  double t347;
  double t348;
  double t349;
  double t350;
  double t353;
  double t354;
  double t355;
  double t356;
  double t359;
  double t360;
  double t361;
  double t362;
  double t364;
  double t365;
  double t366;
  double t367;
  double t369;
  double t370;
  double t371;
  double t372;
  double t374;
  double t375;
  double t376;
  double t377;
  double t379;
  double t380;
  double t381;
  double t382;
  double t384;
  double t385;
  double t386;
  double t387;
  double t389;
  double t390;
  double t391;
  double t392;
  double t394;
  double t395;
  double t396;
  double t397;
  double t399;
  double t400;
  double t401;
  double t402;
  t15 = Cos(var1[4]);
  t19 = Cos(var1[5]);
  t16 = Cos(var1[6]);
  t17 = Sin(var1[5]);
  t20 = Sin(var1[6]);
  t23 = Sin(var1[7]);
  t8 = Cos(var1[7]);
  t9 = -1.*t8;
  t10 = 1. + t9;
  t18 = t15*t16*t17;
  t21 = -1.*t15*t19*t20;
  t22 = t18 + t21;
  t25 = t15*t19*t16;
  t26 = t15*t17*t20;
  t27 = t25 + t26;
  t13 = Sin(var1[4]);
  t37 = Sin(var1[8]);
  t3 = Cos(var1[8]);
  t4 = -1.*t3;
  t5 = 1. + t4;
  t6 = -1.000000637725*t5;
  t7 = 1. + t6;
  t11 = -1.000000637725*t10;
  t12 = 1. + t11;
  t14 = -1.*t12*t13;
  t24 = -0.930418*t22*t23;
  t28 = -0.366501*t27*t23;
  t29 = t14 + t24 + t28;
  t30 = t7*t29;
  t31 = -0.8656776547239999*t10;
  t32 = 1. + t31;
  t33 = t32*t22;
  t34 = -0.340999127418*t10*t27;
  t35 = -0.930418*t13*t23;
  t36 = t33 + t34 + t35;
  t38 = 0.366501*t36*t37;
  t39 = -0.340999127418*t10*t22;
  t40 = -0.134322983001*t10;
  t41 = 1. + t40;
  t42 = t41*t27;
  t43 = -0.366501*t13*t23;
  t44 = t39 + t42 + t43;
  t45 = -0.930418*t44*t37;
  t46 = t30 + t38 + t45;
  t48 = Cos(var1[9]);
  t49 = -1.*t48;
  t50 = 1. + t49;
  t52 = Sin(var1[9]);
  t56 = -0.134322983001*t5;
  t57 = 1. + t56;
  t58 = t57*t36;
  t59 = 0.340999127418*t5*t44;
  t60 = -0.366501*t29*t37;
  t61 = t58 + t59 + t60;
  t68 = 0.340999127418*t5*t36;
  t69 = -0.8656776547239999*t5;
  t70 = 1. + t69;
  t71 = t70*t44;
  t72 = 0.930418*t29*t37;
  t73 = t68 + t71 + t72;
  t81 = Cos(var1[10]);
  t82 = -1.*t81;
  t83 = 1. + t82;
  t85 = Sin(var1[10]);
  t88 = -0.930418*t52*t46;
  t89 = 0.340999127418*t50*t61;
  t90 = -0.8656776547239999*t50;
  t91 = 1. + t90;
  t92 = t91*t73;
  t93 = t88 + t89 + t92;
  t99 = 0.366501*t52*t46;
  t100 = -0.134322983001*t50;
  t101 = 1. + t100;
  t102 = t101*t61;
  t103 = 0.340999127418*t50*t73;
  t104 = t99 + t102 + t103;
  t109 = -1.000000637725*t50;
  t110 = 1. + t109;
  t111 = t110*t46;
  t112 = -0.366501*t52*t61;
  t113 = 0.930418*t52*t73;
  t114 = t111 + t112 + t113;
  t116 = Cos(var1[11]);
  t117 = -1.*t116;
  t118 = 1. + t117;
  t120 = Sin(var1[11]);
  t123 = 0.930418*t85*t93;
  t124 = -0.366501*t85*t104;
  t125 = -1.000000637725*t83;
  t126 = 1. + t125;
  t127 = t126*t114;
  t128 = t123 + t124 + t127;
  t134 = -0.8656776547239999*t83;
  t135 = 1. + t134;
  t136 = t135*t93;
  t137 = 0.340999127418*t83*t104;
  t138 = -0.930418*t85*t114;
  t139 = t136 + t137 + t138;
  t145 = 0.340999127418*t83*t93;
  t146 = -0.134322983001*t83;
  t147 = 1. + t146;
  t148 = t147*t104;
  t149 = 0.366501*t85*t114;
  t150 = t145 + t148 + t149;
  t153 = Cos(var1[12]);
  t154 = -1.*t153;
  t155 = 1. + t154;
  t157 = Sin(var1[12]);
  t160 = 0.366501*t120*t128;
  t161 = 0.340999127418*t118*t139;
  t162 = -0.134322983001*t118;
  t163 = 1. + t162;
  t164 = t163*t150;
  t165 = t160 + t161 + t164;
  t171 = -0.930418*t120*t128;
  t172 = -0.8656776547239999*t118;
  t173 = 1. + t172;
  t174 = t173*t139;
  t175 = 0.340999127418*t118*t150;
  t176 = t171 + t174 + t175;
  t181 = -1.000000637725*t118;
  t182 = 1. + t181;
  t183 = t182*t128;
  t184 = 0.930418*t120*t139;
  t185 = -0.366501*t120*t150;
  t186 = t183 + t184 + t185;
  t211 = Cos(var1[3]);
  t213 = Sin(var1[3]);
  t218 = t211*t19*t13;
  t219 = t213*t17;
  t220 = t218 + t219;
  t214 = -1.*t19*t213;
  t215 = t211*t13*t17;
  t216 = t214 + t215;
  t217 = t16*t216;
  t221 = -1.*t220*t20;
  t222 = t217 + t221;
  t224 = t16*t220;
  t225 = t216*t20;
  t226 = t224 + t225;
  t51 = 0.039853038461262744*t50;
  t53 = -0.23670515095269612*t52;
  t54 = t51 + t53;
  t212 = t211*t15*t12;
  t223 = -0.930418*t222*t23;
  t227 = -0.366501*t226*t23;
  t228 = t212 + t223 + t227;
  t229 = t7*t228;
  t230 = -0.340999127418*t10*t222;
  t231 = t41*t226;
  t232 = 0.366501*t211*t15*t23;
  t233 = t230 + t231 + t232;
  t234 = -0.930418*t233*t37;
  t235 = t32*t222;
  t236 = -0.340999127418*t10*t226;
  t237 = 0.930418*t211*t15*t23;
  t238 = t235 + t236 + t237;
  t239 = 0.366501*t238*t37;
  t240 = t229 + t234 + t239;
  t63 = -1.5981976069815686e-7*var1[9];
  t64 = 0.08675267452931407*t50;
  t65 = 0.014606169134372047*t52;
  t66 = t63 + t64 + t65;
  t243 = 0.340999127418*t5*t233;
  t244 = t57*t238;
  t245 = -0.366501*t228*t37;
  t246 = t243 + t244 + t245;
  t75 = -6.295460977284962e-8*var1[9];
  t76 = -0.22023473313910558*t50;
  t77 = -0.03707996069223323*t52;
  t78 = t75 + t76 + t77;
  t249 = t70*t233;
  t250 = 0.340999127418*t5*t238;
  t251 = 0.930418*t228*t37;
  t252 = t249 + t250 + t251;
  t80 = -1.6084556086870008e-7*var1[10];
  t84 = -0.29135406957765553*t83;
  t86 = -0.02832985722118838*t85;
  t87 = t80 + t84 + t86;
  t95 = -4.0833068682577724e-7*var1[10];
  t96 = 0.11476729583292707*t83;
  t97 = 0.0111594154470601*t85;
  t98 = t95 + t96 + t97;
  t106 = 0.03044854601678662*t83;
  t107 = -0.3131431996991197*t85;
  t108 = t106 + t107;
  t119 = -0.26285954081199375*t118;
  t121 = -0.634735404786378*t120;
  t122 = t119 + t121;
  t255 = -0.930418*t52*t240;
  t256 = 0.340999127418*t50*t246;
  t257 = t91*t252;
  t258 = t255 + t256 + t257;
  t260 = 0.366501*t52*t240;
  t261 = t101*t246;
  t262 = 0.340999127418*t50*t252;
  t263 = t260 + t261 + t262;
  t265 = t110*t240;
  t266 = -0.366501*t52*t246;
  t267 = 0.930418*t52*t252;
  t268 = t265 + t266 + t267;
  t130 = 6.369237629068993e-8*var1[11];
  t131 = -0.5905692458505322*t118;
  t132 = 0.24456909227538925*t120;
  t133 = t130 + t131 + t132;
  t141 = 1.6169269214444473e-7*var1[11];
  t142 = 0.2326311605896123*t118;
  t143 = -0.09633822312984319*t120;
  t144 = t141 + t142 + t143;
  t152 = 1.7876586242383724e-7*var1[12];
  t156 = 0.3243041141817093*t155;
  t158 = 0.02270383571304597*t157;
  t159 = t152 + t156 + t158;
  t270 = 0.930418*t85*t258;
  t271 = -0.366501*t85*t263;
  t272 = t126*t268;
  t273 = t270 + t271 + t272;
  t275 = t135*t258;
  t276 = 0.340999127418*t83*t263;
  t277 = -0.930418*t85*t268;
  t278 = t275 + t276 + t277;
  t280 = 0.340999127418*t83*t258;
  t281 = t147*t263;
  t282 = 0.366501*t85*t268;
  t283 = t280 + t281 + t282;
  t167 = 7.041766963257243e-8*var1[12];
  t168 = -0.8232948486053725*t155;
  t169 = -0.05763710717422546*t157;
  t170 = t167 + t168 + t169;
  t178 = 0.06194758047549556*t155;
  t179 = -0.8848655643005321*t157;
  t180 = t178 + t179;
  t285 = 0.366501*t120*t273;
  t286 = 0.340999127418*t118*t278;
  t287 = t163*t283;
  t288 = t285 + t286 + t287;
  t290 = -0.930418*t120*t273;
  t291 = t173*t278;
  t292 = 0.340999127418*t118*t283;
  t293 = t290 + t291 + t292;
  t190 = -1.000000637725*t155;
  t191 = 1. + t190;
  t295 = t182*t273;
  t296 = 0.930418*t120*t278;
  t297 = -0.366501*t120*t283;
  t298 = t295 + t296 + t297;
  t196 = -0.8656776547239999*t155;
  t197 = 1. + t196;
  t202 = -0.134322983001*t155;
  t203 = 1. + t202;
  t322 = t19*t213*t13;
  t323 = -1.*t211*t17;
  t324 = t322 + t323;
  t318 = t211*t19;
  t319 = t213*t13*t17;
  t320 = t318 + t319;
  t321 = t16*t320;
  t325 = -1.*t324*t20;
  t326 = t321 + t325;
  t328 = t16*t324;
  t329 = t320*t20;
  t330 = t328 + t329;
  t317 = t15*t12*t213;
  t327 = -0.930418*t326*t23;
  t331 = -0.366501*t330*t23;
  t332 = t317 + t327 + t331;
  t333 = t7*t332;
  t334 = -0.340999127418*t10*t326;
  t335 = t41*t330;
  t336 = 0.366501*t15*t213*t23;
  t337 = t334 + t335 + t336;
  t338 = -0.930418*t337*t37;
  t339 = t32*t326;
  t340 = -0.340999127418*t10*t330;
  t341 = 0.930418*t15*t213*t23;
  t342 = t339 + t340 + t341;
  t343 = 0.366501*t342*t37;
  t344 = t333 + t338 + t343;
  t347 = 0.340999127418*t5*t337;
  t348 = t57*t342;
  t349 = -0.366501*t332*t37;
  t350 = t347 + t348 + t349;
  t353 = t70*t337;
  t354 = 0.340999127418*t5*t342;
  t355 = 0.930418*t332*t37;
  t356 = t353 + t354 + t355;
  t359 = -0.930418*t52*t344;
  t360 = 0.340999127418*t50*t350;
  t361 = t91*t356;
  t362 = t359 + t360 + t361;
  t364 = 0.366501*t52*t344;
  t365 = t101*t350;
  t366 = 0.340999127418*t50*t356;
  t367 = t364 + t365 + t366;
  t369 = t110*t344;
  t370 = -0.366501*t52*t350;
  t371 = 0.930418*t52*t356;
  t372 = t369 + t370 + t371;
  t374 = 0.930418*t85*t362;
  t375 = -0.366501*t85*t367;
  t376 = t126*t372;
  t377 = t374 + t375 + t376;
  t379 = t135*t362;
  t380 = 0.340999127418*t83*t367;
  t381 = -0.930418*t85*t372;
  t382 = t379 + t380 + t381;
  t384 = 0.340999127418*t83*t362;
  t385 = t147*t367;
  t386 = 0.366501*t85*t372;
  t387 = t384 + t385 + t386;
  t389 = 0.366501*t120*t377;
  t390 = 0.340999127418*t118*t382;
  t391 = t163*t387;
  t392 = t389 + t390 + t391;
  t394 = -0.930418*t120*t377;
  t395 = t173*t382;
  t396 = 0.340999127418*t118*t387;
  t397 = t394 + t395 + t396;
  t399 = t182*t377;
  t400 = 0.930418*t120*t382;
  t401 = -0.366501*t120*t387;
  t402 = t399 + t400 + t401;
  p_output1[0]=Sqrt(Power(0. - 1.*t108*t114 - 1.*t122*t128 - 1.*t133*t139 - 1.*t144*t150 - 1.*t159*t165 - 1.*t170*t176 - 1.*t180*t186 - 0.061947*(-0.366501*t157*t165 + 0.930418*t157*t176 + t186*t191) + 0.792446*(0.340999127418*t155*t165 - 0.930418*t157*t186 + t176*t197) - 0.402615*(0.340999127418*t155*t176 + 0.366501*t157*t186 + t165*t203) - 0.045*t46 - 1.*t46*t54 + 0.138152*t61 - 1.*t61*t66 - 0.108789*t73 - 1.*t73*t78 - 1.*t87*t93 - 1.*t104*t98,2) + Power(0. - 0.045*t240 + 0.138152*t246 - 0.108789*t252 - 1.*t108*t268 - 1.*t122*t273 - 1.*t133*t278 - 1.*t144*t283 - 1.*t159*t288 - 1.*t170*t293 - 1.*t180*t298 + 0.792446*(0.340999127418*t155*t288 + t197*t293 - 0.930418*t157*t298) - 0.402615*(t203*t288 + 0.340999127418*t155*t293 + 0.366501*t157*t298) - 0.061947*(-0.366501*t157*t288 + 0.930418*t157*t293 + t191*t298) - 1.*t240*t54 - 1.*t246*t66 - 1.*t252*t78 - 1.*t258*t87 - 1.*t263*t98,2) + Power(0. - 0.045*t344 + 0.138152*t350 - 0.108789*t356 - 1.*t108*t372 - 1.*t122*t377 - 1.*t133*t382 - 1.*t144*t387 - 1.*t159*t392 - 1.*t170*t397 - 1.*t180*t402 + 0.792446*(0.340999127418*t155*t392 + t197*t397 - 0.930418*t157*t402) - 0.402615*(t203*t392 + 0.340999127418*t155*t397 + 0.366501*t157*t402) - 0.061947*(-0.366501*t157*t392 + 0.930418*t157*t397 + t191*t402) - 1.*t344*t54 - 1.*t350*t66 - 1.*t356*t78 - 1.*t362*t87 - 1.*t367*t98,2));
}



void gen::kin::LL_left(Eigen::Ref<Eigen::VectorXd> p_output1, const Eigen::Ref<const Eigen::VectorXd> var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
