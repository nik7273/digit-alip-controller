/*
 * Automatically Generated from Mathematica.
 * Thu 28 Oct 2021 01:39:24 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <eigen3/Eigen/Dense>

#include "gen/kin/p_LeftToeFront.hh"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

INLINE double Sec(double x) { return 1/cos(x); }
INLINE double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(Eigen::Ref<Eigen::VectorXd> p_output1,const Eigen::Ref<const Eigen::VectorXd> var1)
{
  double t9;
  double t6;
  double t10;
  double t7;
  double t11;
  double t3;
  double t8;
  double t12;
  double t13;
  double t15;
  double t16;
  double t17;
  double t18;
  double t21;
  double t22;
  double t23;
  double t25;
  double t29;
  double t30;
  double t31;
  double t37;
  double t38;
  double t39;
  double t20;
  double t52;
  double t53;
  double t54;
  double t56;
  double t71;
  double t72;
  double t73;
  double t74;
  double t75;
  double t76;
  double t45;
  double t46;
  double t47;
  double t48;
  double t49;
  double t50;
  double t60;
  double t61;
  double t62;
  double t63;
  double t64;
  double t65;
  double t81;
  double t82;
  double t83;
  double t85;
  double t88;
  double t89;
  double t90;
  double t91;
  double t92;
  double t93;
  double t99;
  double t100;
  double t101;
  double t102;
  double t103;
  double t104;
  double t110;
  double t111;
  double t112;
  double t113;
  double t114;
  double t115;
  double t118;
  double t119;
  double t120;
  double t122;
  double t125;
  double t126;
  double t127;
  double t128;
  double t129;
  double t130;
  double t136;
  double t137;
  double t138;
  double t139;
  double t140;
  double t141;
  double t146;
  double t147;
  double t148;
  double t149;
  double t150;
  double t151;
  double t153;
  double t154;
  double t155;
  double t157;
  double t160;
  double t161;
  double t162;
  double t163;
  double t164;
  double t165;
  double t171;
  double t172;
  double t173;
  double t174;
  double t175;
  double t176;
  double t182;
  double t183;
  double t184;
  double t185;
  double t186;
  double t187;
  double t190;
  double t191;
  double t192;
  double t194;
  double t226;
  double t227;
  double t228;
  double t231;
  double t197;
  double t198;
  double t199;
  double t200;
  double t201;
  double t202;
  double t208;
  double t209;
  double t210;
  double t211;
  double t212;
  double t213;
  double t218;
  double t219;
  double t220;
  double t221;
  double t222;
  double t223;
  double t230;
  double t235;
  double t249;
  double t266;
  double t240;
  double t241;
  double t242;
  double t243;
  double t244;
  double t245;
  double t269;
  double t257;
  double t258;
  double t259;
  double t260;
  double t261;
  double t262;
  double t273;
  double t274;
  double t275;
  double t276;
  double t277;
  double t278;
  double t253;
  double t283;
  double t250;
  double t291;
  double t232;
  double t280;
  double t236;
  double t4;
  double t5;
  double t24;
  double t26;
  double t27;
  double t311;
  double t312;
  double t313;
  double t315;
  double t316;
  double t317;
  double t32;
  double t33;
  double t34;
  double t35;
  double t40;
  double t41;
  double t42;
  double t43;
  double t320;
  double t321;
  double t322;
  double t324;
  double t325;
  double t326;
  double t51;
  double t55;
  double t57;
  double t58;
  double t66;
  double t67;
  double t68;
  double t69;
  double t77;
  double t78;
  double t79;
  double t84;
  double t86;
  double t87;
  double t338;
  double t339;
  double t340;
  double t341;
  double t328;
  double t329;
  double t330;
  double t331;
  double t333;
  double t334;
  double t335;
  double t336;
  double t95;
  double t96;
  double t97;
  double t98;
  double t106;
  double t107;
  double t108;
  double t109;
  double t117;
  double t121;
  double t123;
  double t124;
  double t343;
  double t344;
  double t345;
  double t346;
  double t348;
  double t349;
  double t350;
  double t351;
  double t353;
  double t354;
  double t355;
  double t356;
  double t132;
  double t133;
  double t134;
  double t135;
  double t143;
  double t144;
  double t145;
  double t156;
  double t158;
  double t159;
  double t358;
  double t359;
  double t360;
  double t361;
  double t363;
  double t364;
  double t365;
  double t366;
  double t368;
  double t369;
  double t370;
  double t371;
  double t167;
  double t168;
  double t169;
  double t170;
  double t178;
  double t179;
  double t180;
  double t181;
  double t189;
  double t193;
  double t195;
  double t196;
  double t373;
  double t374;
  double t375;
  double t376;
  double t378;
  double t379;
  double t380;
  double t381;
  double t383;
  double t384;
  double t385;
  double t386;
  double t204;
  double t205;
  double t206;
  double t207;
  double t215;
  double t216;
  double t217;
  double t225;
  double t229;
  double t233;
  double t234;
  double t237;
  double t238;
  double t239;
  double t388;
  double t389;
  double t390;
  double t391;
  double t393;
  double t394;
  double t395;
  double t396;
  double t398;
  double t399;
  double t400;
  double t401;
  double t247;
  double t248;
  double t251;
  double t252;
  double t254;
  double t255;
  double t256;
  double t264;
  double t265;
  double t267;
  double t268;
  double t270;
  double t271;
  double t272;
  double t281;
  double t403;
  double t404;
  double t405;
  double t406;
  double t284;
  double t408;
  double t409;
  double t410;
  double t411;
  double t286;
  double t287;
  double t413;
  double t414;
  double t415;
  double t416;
  double t292;
  double t294;
  double t295;
  double t297;
  double t301;
  double t302;
  double t304;
  double t306;
  double t437;
  double t438;
  double t439;
  double t441;
  double t442;
  double t443;
  double t455;
  double t456;
  double t457;
  double t458;
  double t450;
  double t451;
  double t452;
  double t453;
  double t445;
  double t446;
  double t447;
  double t448;
  double t460;
  double t461;
  double t462;
  double t463;
  double t465;
  double t466;
  double t467;
  double t468;
  double t470;
  double t471;
  double t472;
  double t473;
  double t475;
  double t476;
  double t477;
  double t478;
  double t480;
  double t481;
  double t482;
  double t483;
  double t485;
  double t486;
  double t487;
  double t488;
  double t490;
  double t491;
  double t492;
  double t493;
  double t495;
  double t496;
  double t497;
  double t498;
  double t500;
  double t501;
  double t502;
  double t503;
  double t505;
  double t506;
  double t507;
  double t508;
  double t510;
  double t511;
  double t512;
  double t513;
  double t515;
  double t516;
  double t517;
  double t518;
  double t520;
  double t521;
  double t522;
  double t523;
  double t525;
  double t526;
  double t527;
  double t528;
  double t530;
  double t531;
  double t532;
  double t533;
  t9 = Cos(var1[3]);
  t6 = Cos(var1[5]);
  t10 = Sin(var1[4]);
  t7 = Sin(var1[3]);
  t11 = Sin(var1[5]);
  t3 = Cos(var1[6]);
  t8 = -1.*t6*t7;
  t12 = t9*t10*t11;
  t13 = t8 + t12;
  t15 = t9*t6*t10;
  t16 = t7*t11;
  t17 = t15 + t16;
  t18 = Sin(var1[6]);
  t21 = Cos(var1[7]);
  t22 = -1.*t21;
  t23 = 1. + t22;
  t25 = Sin(var1[7]);
  t29 = t3*t13;
  t30 = -1.*t17*t18;
  t31 = t29 + t30;
  t37 = t3*t17;
  t38 = t13*t18;
  t39 = t37 + t38;
  t20 = Cos(var1[4]);
  t52 = Cos(var1[8]);
  t53 = -1.*t52;
  t54 = 1. + t53;
  t56 = Sin(var1[8]);
  t71 = -1.000000637725*t23;
  t72 = 1. + t71;
  t73 = t9*t20*t72;
  t74 = -0.930418*t31*t25;
  t75 = -0.366501*t39*t25;
  t76 = t73 + t74 + t75;
  t45 = -0.340999127418*t23*t31;
  t46 = -0.134322983001*t23;
  t47 = 1. + t46;
  t48 = t47*t39;
  t49 = 0.366501*t9*t20*t25;
  t50 = t45 + t48 + t49;
  t60 = -0.8656776547239999*t23;
  t61 = 1. + t60;
  t62 = t61*t31;
  t63 = -0.340999127418*t23*t39;
  t64 = 0.930418*t9*t20*t25;
  t65 = t62 + t63 + t64;
  t81 = Cos(var1[9]);
  t82 = -1.*t81;
  t83 = 1. + t82;
  t85 = Sin(var1[9]);
  t88 = -1.000000637725*t54;
  t89 = 1. + t88;
  t90 = t89*t76;
  t91 = -0.930418*t50*t56;
  t92 = 0.366501*t65*t56;
  t93 = t90 + t91 + t92;
  t99 = 0.340999127418*t54*t50;
  t100 = -0.134322983001*t54;
  t101 = 1. + t100;
  t102 = t101*t65;
  t103 = -0.366501*t76*t56;
  t104 = t99 + t102 + t103;
  t110 = -0.8656776547239999*t54;
  t111 = 1. + t110;
  t112 = t111*t50;
  t113 = 0.340999127418*t54*t65;
  t114 = 0.930418*t76*t56;
  t115 = t112 + t113 + t114;
  t118 = Cos(var1[10]);
  t119 = -1.*t118;
  t120 = 1. + t119;
  t122 = Sin(var1[10]);
  t125 = -0.930418*t85*t93;
  t126 = 0.340999127418*t83*t104;
  t127 = -0.8656776547239999*t83;
  t128 = 1. + t127;
  t129 = t128*t115;
  t130 = t125 + t126 + t129;
  t136 = 0.366501*t85*t93;
  t137 = -0.134322983001*t83;
  t138 = 1. + t137;
  t139 = t138*t104;
  t140 = 0.340999127418*t83*t115;
  t141 = t136 + t139 + t140;
  t146 = -1.000000637725*t83;
  t147 = 1. + t146;
  t148 = t147*t93;
  t149 = -0.366501*t85*t104;
  t150 = 0.930418*t85*t115;
  t151 = t148 + t149 + t150;
  t153 = Cos(var1[11]);
  t154 = -1.*t153;
  t155 = 1. + t154;
  t157 = Sin(var1[11]);
  t160 = 0.930418*t122*t130;
  t161 = -0.366501*t122*t141;
  t162 = -1.000000637725*t120;
  t163 = 1. + t162;
  t164 = t163*t151;
  t165 = t160 + t161 + t164;
  t171 = -0.8656776547239999*t120;
  t172 = 1. + t171;
  t173 = t172*t130;
  t174 = 0.340999127418*t120*t141;
  t175 = -0.930418*t122*t151;
  t176 = t173 + t174 + t175;
  t182 = 0.340999127418*t120*t130;
  t183 = -0.134322983001*t120;
  t184 = 1. + t183;
  t185 = t184*t141;
  t186 = 0.366501*t122*t151;
  t187 = t182 + t185 + t186;
  t190 = Cos(var1[12]);
  t191 = -1.*t190;
  t192 = 1. + t191;
  t194 = Sin(var1[12]);
  t226 = Cos(var1[13]);
  t227 = -1.*t226;
  t228 = 1. + t227;
  t231 = Sin(var1[13]);
  t197 = 0.366501*t157*t165;
  t198 = 0.340999127418*t155*t176;
  t199 = -0.134322983001*t155;
  t200 = 1. + t199;
  t201 = t200*t187;
  t202 = t197 + t198 + t201;
  t208 = -0.930418*t157*t165;
  t209 = -0.8656776547239999*t155;
  t210 = 1. + t209;
  t211 = t210*t176;
  t212 = 0.340999127418*t155*t187;
  t213 = t208 + t211 + t212;
  t218 = -1.000000637725*t155;
  t219 = 1. + t218;
  t220 = t219*t165;
  t221 = 0.930418*t157*t176;
  t222 = -0.366501*t157*t187;
  t223 = t220 + t221 + t222;
  t230 = -0.444895486988*t228;
  t235 = 0.175248972904*t228;
  t249 = 0.120666640478*t228;
  t266 = -0.553471*t231;
  t240 = -0.366501*t194*t202;
  t241 = 0.930418*t194*t213;
  t242 = -1.000000637725*t192;
  t243 = 1. + t242;
  t244 = t243*t223;
  t245 = t240 + t241 + t244;
  t269 = 0.803828*t231;
  t257 = 0.340999127418*t192*t202;
  t258 = -0.8656776547239999*t192;
  t259 = 1. + t258;
  t260 = t259*t213;
  t261 = -0.930418*t194*t223;
  t262 = t257 + t260 + t261;
  t273 = -0.134322983001*t192;
  t274 = 1. + t273;
  t275 = t274*t202;
  t276 = 0.340999127418*t192*t213;
  t277 = 0.366501*t194*t223;
  t278 = t275 + t276 + t277;
  t253 = -0.218018*t231;
  t283 = -0.120666640478*t228;
  t250 = -0.803828*t231;
  t291 = 0.444895486988*t228;
  t232 = 0.218018*t231;
  t280 = -0.175248972904*t228;
  t236 = 0.553471*t231;
  t4 = -1.*t3;
  t5 = 1. + t4;
  t24 = -0.04500040093286238*t23;
  t26 = -0.0846680539949003*t25;
  t27 = t24 + t26;
  t311 = t9*t6;
  t312 = t7*t10*t11;
  t313 = t311 + t312;
  t315 = t6*t7*t10;
  t316 = -1.*t9*t11;
  t317 = t315 + t316;
  t32 = 1.296332362046933e-7*var1[7];
  t33 = 0.07877668146182712*t23;
  t34 = -0.04186915633414423*t25;
  t35 = t32 + t33 + t34;
  t40 = -3.2909349868922137e-7*var1[7];
  t41 = 0.03103092645718495*t23;
  t42 = -0.016492681424499736*t25;
  t43 = t40 + t41 + t42;
  t320 = t3*t313;
  t321 = -1.*t317*t18;
  t322 = t320 + t321;
  t324 = t3*t317;
  t325 = t313*t18;
  t326 = t324 + t325;
  t51 = 1.296332362046933e-7*var1[8];
  t55 = -0.14128592423750855*t54;
  t57 = -0.04186915633414423*t56;
  t58 = t51 + t55 + t57;
  t66 = 3.2909349868922137e-7*var1[8];
  t67 = 0.055653945343889656*t54;
  t68 = 0.016492681424499736*t56;
  t69 = t66 + t67 + t68;
  t77 = -0.04500040093286238*t54;
  t78 = 0.15185209683981668*t56;
  t79 = t77 + t78;
  t84 = 0.039853038461262744*t83;
  t86 = -0.23670515095269612*t85;
  t87 = t84 + t86;
  t338 = t20*t72*t7;
  t339 = -0.930418*t322*t25;
  t340 = -0.366501*t326*t25;
  t341 = t338 + t339 + t340;
  t328 = -0.340999127418*t23*t322;
  t329 = t47*t326;
  t330 = 0.366501*t20*t7*t25;
  t331 = t328 + t329 + t330;
  t333 = t61*t322;
  t334 = -0.340999127418*t23*t326;
  t335 = 0.930418*t20*t7*t25;
  t336 = t333 + t334 + t335;
  t95 = -1.5981976069815686e-7*var1[9];
  t96 = 0.08675267452931407*t83;
  t97 = 0.014606169134372047*t85;
  t98 = t95 + t96 + t97;
  t106 = -6.295460977284962e-8*var1[9];
  t107 = -0.22023473313910558*t83;
  t108 = -0.03707996069223323*t85;
  t109 = t106 + t107 + t108;
  t117 = -1.6084556086870008e-7*var1[10];
  t121 = -0.29135406957765553*t120;
  t123 = -0.02832985722118838*t122;
  t124 = t117 + t121 + t123;
  t343 = t89*t341;
  t344 = -0.930418*t331*t56;
  t345 = 0.366501*t336*t56;
  t346 = t343 + t344 + t345;
  t348 = 0.340999127418*t54*t331;
  t349 = t101*t336;
  t350 = -0.366501*t341*t56;
  t351 = t348 + t349 + t350;
  t353 = t111*t331;
  t354 = 0.340999127418*t54*t336;
  t355 = 0.930418*t341*t56;
  t356 = t353 + t354 + t355;
  t132 = -4.0833068682577724e-7*var1[10];
  t133 = 0.11476729583292707*t120;
  t134 = 0.0111594154470601*t122;
  t135 = t132 + t133 + t134;
  t143 = 0.03044854601678662*t120;
  t144 = -0.3131431996991197*t122;
  t145 = t143 + t144;
  t156 = -0.26285954081199375*t155;
  t158 = -0.634735404786378*t157;
  t159 = t156 + t158;
  t358 = -0.930418*t85*t346;
  t359 = 0.340999127418*t83*t351;
  t360 = t128*t356;
  t361 = t358 + t359 + t360;
  t363 = 0.366501*t85*t346;
  t364 = t138*t351;
  t365 = 0.340999127418*t83*t356;
  t366 = t363 + t364 + t365;
  t368 = t147*t346;
  t369 = -0.366501*t85*t351;
  t370 = 0.930418*t85*t356;
  t371 = t368 + t369 + t370;
  t167 = 6.369237629068993e-8*var1[11];
  t168 = -0.5905692458505322*t155;
  t169 = 0.24456909227538925*t157;
  t170 = t167 + t168 + t169;
  t178 = 1.6169269214444473e-7*var1[11];
  t179 = 0.2326311605896123*t155;
  t180 = -0.09633822312984319*t157;
  t181 = t178 + t179 + t180;
  t189 = 1.7876586242383724e-7*var1[12];
  t193 = 0.3243041141817093*t192;
  t195 = 0.02270383571304597*t194;
  t196 = t189 + t193 + t195;
  t373 = 0.930418*t122*t361;
  t374 = -0.366501*t122*t366;
  t375 = t163*t371;
  t376 = t373 + t374 + t375;
  t378 = t172*t361;
  t379 = 0.340999127418*t120*t366;
  t380 = -0.930418*t122*t371;
  t381 = t378 + t379 + t380;
  t383 = 0.340999127418*t120*t361;
  t384 = t184*t366;
  t385 = 0.366501*t122*t371;
  t386 = t383 + t384 + t385;
  t204 = 7.041766963257243e-8*var1[12];
  t205 = -0.8232948486053725*t192;
  t206 = -0.05763710717422546*t194;
  t207 = t204 + t205 + t206;
  t215 = 0.06194758047549556*t192;
  t216 = -0.8848655643005321*t194;
  t217 = t215 + t216;
  t225 = -2.7989049814696287e-7*var1[13];
  t229 = 0.15748067958019524*t228;
  t233 = t230 + t232;
  t234 = -0.528674719304*t233;
  t237 = t235 + t236;
  t238 = 0.29871295412*t237;
  t239 = t225 + t229 + t234 + t238;
  t388 = 0.366501*t157*t376;
  t389 = 0.340999127418*t155*t381;
  t390 = t200*t386;
  t391 = t388 + t389 + t390;
  t393 = -0.930418*t157*t376;
  t394 = t210*t381;
  t395 = 0.340999127418*t155*t386;
  t396 = t393 + t394 + t395;
  t398 = t219*t376;
  t399 = 0.930418*t157*t381;
  t400 = -0.366501*t157*t386;
  t401 = t398 + t399 + t400;
  t247 = -1.9271694180831932e-7*var1[13];
  t248 = -0.3667264808254521*t228;
  t251 = t249 + t250;
  t252 = 0.29871295412*t251;
  t254 = t230 + t253;
  t255 = 0.445034169498*t254;
  t256 = t247 + t248 + t252 + t255;
  t264 = 7.591321355439789e-8*var1[13];
  t265 = 0.2845150083511607*t228;
  t267 = t235 + t266;
  t268 = 0.445034169498*t267;
  t270 = t249 + t269;
  t271 = -0.528674719304*t270;
  t272 = t264 + t265 + t268 + t271;
  t281 = t280 + t266;
  t403 = -0.366501*t194*t391;
  t404 = 0.930418*t194*t396;
  t405 = t243*t401;
  t406 = t403 + t404 + t405;
  t284 = t283 + t269;
  t408 = 0.340999127418*t192*t391;
  t409 = t259*t396;
  t410 = -0.930418*t194*t401;
  t411 = t408 + t409 + t410;
  t286 = -0.952469601425*t228;
  t287 = 1. + t286;
  t413 = t274*t391;
  t414 = 0.340999127418*t192*t396;
  t415 = 0.366501*t194*t401;
  t416 = t413 + t414 + t415;
  t292 = t291 + t253;
  t294 = -0.693671301908*t228;
  t295 = 1. + t294;
  t297 = t283 + t250;
  t301 = -0.353861996165*t228;
  t302 = 1. + t301;
  t304 = t291 + t232;
  t306 = t280 + t236;
  t437 = t20*t3*t11;
  t438 = -1.*t20*t6*t18;
  t439 = t437 + t438;
  t441 = t20*t6*t3;
  t442 = t20*t11*t18;
  t443 = t441 + t442;
  t455 = -1.*t72*t10;
  t456 = -0.930418*t439*t25;
  t457 = -0.366501*t443*t25;
  t458 = t455 + t456 + t457;
  t450 = t61*t439;
  t451 = -0.340999127418*t23*t443;
  t452 = -0.930418*t10*t25;
  t453 = t450 + t451 + t452;
  t445 = -0.340999127418*t23*t439;
  t446 = t47*t443;
  t447 = -0.366501*t10*t25;
  t448 = t445 + t446 + t447;
  t460 = t89*t458;
  t461 = 0.366501*t453*t56;
  t462 = -0.930418*t448*t56;
  t463 = t460 + t461 + t462;
  t465 = t101*t453;
  t466 = 0.340999127418*t54*t448;
  t467 = -0.366501*t458*t56;
  t468 = t465 + t466 + t467;
  t470 = 0.340999127418*t54*t453;
  t471 = t111*t448;
  t472 = 0.930418*t458*t56;
  t473 = t470 + t471 + t472;
  t475 = -0.930418*t85*t463;
  t476 = 0.340999127418*t83*t468;
  t477 = t128*t473;
  t478 = t475 + t476 + t477;
  t480 = 0.366501*t85*t463;
  t481 = t138*t468;
  t482 = 0.340999127418*t83*t473;
  t483 = t480 + t481 + t482;
  t485 = t147*t463;
  t486 = -0.366501*t85*t468;
  t487 = 0.930418*t85*t473;
  t488 = t485 + t486 + t487;
  t490 = 0.930418*t122*t478;
  t491 = -0.366501*t122*t483;
  t492 = t163*t488;
  t493 = t490 + t491 + t492;
  t495 = t172*t478;
  t496 = 0.340999127418*t120*t483;
  t497 = -0.930418*t122*t488;
  t498 = t495 + t496 + t497;
  t500 = 0.340999127418*t120*t478;
  t501 = t184*t483;
  t502 = 0.366501*t122*t488;
  t503 = t500 + t501 + t502;
  t505 = 0.366501*t157*t493;
  t506 = 0.340999127418*t155*t498;
  t507 = t200*t503;
  t508 = t505 + t506 + t507;
  t510 = -0.930418*t157*t493;
  t511 = t210*t498;
  t512 = 0.340999127418*t155*t503;
  t513 = t510 + t511 + t512;
  t515 = t219*t493;
  t516 = 0.930418*t157*t498;
  t517 = -0.366501*t157*t503;
  t518 = t515 + t516 + t517;
  t520 = -0.366501*t194*t508;
  t521 = 0.930418*t194*t513;
  t522 = t243*t518;
  t523 = t520 + t521 + t522;
  t525 = 0.340999127418*t192*t508;
  t526 = t259*t513;
  t527 = -0.930418*t194*t518;
  t528 = t525 + t526 + t527;
  t530 = t274*t508;
  t531 = 0.340999127418*t192*t513;
  t532 = 0.366501*t194*t518;
  t533 = t530 + t531 + t532;
  p_output1[0]=t109*t115 + t124*t130 + t135*t141 + t145*t151 + t159*t165 + t170*t176 + 0.091*t17*t18 + t181*t187 + t196*t202 + t207*t213 + t217*t223 + t239*t245 + t256*t262 + t272*t278 + 0.421111*(t245*t281 + t262*t284 + t278*t287) - 0.8394*(t245*t292 + t262*t295 + t278*t297) + 0.175493*(t245*t302 + t262*t304 + t278*t306) + t31*t35 + t39*t43 + 0.091*t13*t5 + t50*t58 + t65*t69 + t76*t79 + t20*t27*t9 + t87*t93 + t104*t98 + var1[0];
  p_output1[1]=0.091*t18*t317 + t322*t35 + t109*t356 + t124*t361 + t135*t366 + t145*t371 + t159*t376 + t170*t381 + t181*t386 + t196*t391 + t207*t396 + t217*t401 + t239*t406 + t256*t411 + t272*t416 + 0.421111*(t281*t406 + t284*t411 + t287*t416) - 0.8394*(t292*t406 + t295*t411 + t297*t416) + 0.175493*(t302*t406 + t304*t411 + t306*t416) + t326*t43 + 0.091*t313*t5 + t331*t58 + t336*t69 + t20*t27*t7 + t341*t79 + t346*t87 + t351*t98 + var1[1];
  p_output1[2]=-1.*t10*t27 + t35*t439 + t43*t443 + t109*t473 + t124*t478 + t135*t483 + t145*t488 + t159*t493 + t170*t498 + 0.091*t11*t20*t5 + t181*t503 + t196*t508 + t207*t513 + t217*t518 + t239*t523 + t256*t528 + t272*t533 + 0.421111*(t281*t523 + t284*t528 + t287*t533) - 0.8394*(t292*t523 + t295*t528 + t297*t533) + 0.175493*(t302*t523 + t304*t528 + t306*t533) + t448*t58 + 0.091*t18*t20*t6 + t453*t69 + t458*t79 + t463*t87 + t468*t98 + var1[2];
}



void gen::kin::p_LeftToeFront(Eigen::Ref<Eigen::VectorXd> p_output1, const Eigen::Ref<const Eigen::VectorXd> var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
