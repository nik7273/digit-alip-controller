/*
 * Automatically Generated from Mathematica.
 * Thu 28 Oct 2021 01:43:46 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <eigen3/Eigen/Dense>

#include "gen/kin/p_RightToeFront.hh"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

INLINE double Sec(double x) { return 1/cos(x); }
INLINE double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(Eigen::Ref<Eigen::VectorXd> p_output1,const Eigen::Ref<const Eigen::VectorXd> var1)
{
  double t180;
  double t567;
  double t572;
  double t570;
  double t576;
  double t299;
  double t319;
  double t326;
  double t371;
  double t553;
  double t571;
  double t590;
  double t591;
  double t618;
  double t622;
  double t627;
  double t628;
  double t186;
  double t667;
  double t688;
  double t689;
  double t717;
  double t721;
  double t722;
  double t742;
  double t746;
  double t749;
  double t751;
  double t795;
  double t796;
  double t799;
  double t801;
  double t802;
  double t816;
  double t832;
  double t833;
  double t834;
  double t836;
  double t837;
  double t838;
  double t849;
  double t862;
  double t864;
  double t865;
  double t868;
  double t873;
  double t875;
  double t876;
  double t877;
  double t882;
  double t887;
  double t888;
  double t893;
  double t894;
  double t895;
  double t896;
  double t902;
  double t911;
  double t917;
  double t918;
  double t920;
  double t928;
  double t940;
  double t941;
  double t945;
  double t947;
  double t948;
  double t949;
  double t957;
  double t960;
  double t962;
  double t965;
  double t972;
  double t974;
  double t975;
  double t977;
  double t978;
  double t979;
  double t989;
  double t990;
  double t994;
  double t995;
  double t999;
  double t1000;
  double t1007;
  double t1008;
  double t1009;
  double t1010;
  double t1011;
  double t1012;
  double t1015;
  double t1019;
  double t1020;
  double t1025;
  double t1028;
  double t1029;
  double t1030;
  double t1031;
  double t1032;
  double t1033;
  double t1039;
  double t1043;
  double t1044;
  double t1045;
  double t1046;
  double t1047;
  double t1058;
  double t1060;
  double t1061;
  double t1064;
  double t1068;
  double t1070;
  double t1075;
  double t1077;
  double t1078;
  double t1082;
  double t1138;
  double t1139;
  double t1140;
  double t1143;
  double t1090;
  double t1091;
  double t1092;
  double t1095;
  double t1096;
  double t1097;
  double t1106;
  double t1107;
  double t1108;
  double t1109;
  double t1114;
  double t1116;
  double t1126;
  double t1127;
  double t1128;
  double t1129;
  double t1130;
  double t1131;
  double t1150;
  double t1174;
  double t1142;
  double t1194;
  double t1158;
  double t1159;
  double t1160;
  double t1161;
  double t1162;
  double t1163;
  double t1191;
  double t1182;
  double t1183;
  double t1184;
  double t1185;
  double t1186;
  double t1187;
  double t1203;
  double t1207;
  double t1208;
  double t1209;
  double t1214;
  double t1215;
  double t1151;
  double t1217;
  double t1147;
  double t1242;
  double t1168;
  double t1222;
  double t1175;
  double t370;
  double t403;
  double t525;
  double t620;
  double t621;
  double t644;
  double t649;
  double t664;
  double t665;
  double t1263;
  double t1264;
  double t1265;
  double t1267;
  double t1268;
  double t1269;
  double t694;
  double t699;
  double t708;
  double t716;
  double t724;
  double t750;
  double t784;
  double t793;
  double t1271;
  double t1272;
  double t1273;
  double t1278;
  double t1279;
  double t1280;
  double t820;
  double t821;
  double t823;
  double t828;
  double t842;
  double t843;
  double t844;
  double t878;
  double t885;
  double t886;
  double t1282;
  double t1283;
  double t1284;
  double t1285;
  double t1287;
  double t1288;
  double t1289;
  double t1293;
  double t1295;
  double t1296;
  double t1297;
  double t1298;
  double t898;
  double t899;
  double t900;
  double t901;
  double t931;
  double t936;
  double t937;
  double t939;
  double t952;
  double t963;
  double t966;
  double t967;
  double t1300;
  double t1304;
  double t1305;
  double t1306;
  double t1308;
  double t1309;
  double t1310;
  double t1311;
  double t1313;
  double t1314;
  double t1315;
  double t1316;
  double t981;
  double t982;
  double t985;
  double t987;
  double t1003;
  double t1005;
  double t1006;
  double t1024;
  double t1026;
  double t1027;
  double t1318;
  double t1319;
  double t1320;
  double t1321;
  double t1326;
  double t1327;
  double t1332;
  double t1333;
  double t1335;
  double t1336;
  double t1337;
  double t1338;
  double t1035;
  double t1036;
  double t1037;
  double t1038;
  double t1049;
  double t1050;
  double t1051;
  double t1055;
  double t1074;
  double t1079;
  double t1083;
  double t1084;
  double t1340;
  double t1341;
  double t1342;
  double t1343;
  double t1345;
  double t1346;
  double t1347;
  double t1348;
  double t1350;
  double t1351;
  double t1352;
  double t1353;
  double t1100;
  double t1101;
  double t1102;
  double t1104;
  double t1120;
  double t1123;
  double t1125;
  double t1133;
  double t1141;
  double t1148;
  double t1149;
  double t1152;
  double t1153;
  double t1154;
  double t1355;
  double t1356;
  double t1357;
  double t1358;
  double t1360;
  double t1361;
  double t1362;
  double t1363;
  double t1365;
  double t1366;
  double t1367;
  double t1368;
  double t1166;
  double t1167;
  double t1169;
  double t1170;
  double t1176;
  double t1177;
  double t1178;
  double t1189;
  double t1190;
  double t1192;
  double t1193;
  double t1195;
  double t1196;
  double t1197;
  double t1220;
  double t1370;
  double t1371;
  double t1372;
  double t1373;
  double t1223;
  double t1375;
  double t1376;
  double t1377;
  double t1378;
  double t1225;
  double t1229;
  double t1380;
  double t1381;
  double t1382;
  double t1383;
  double t1235;
  double t1238;
  double t1243;
  double t1245;
  double t1249;
  double t1251;
  double t1252;
  double t1254;
  double t1404;
  double t1405;
  double t1406;
  double t1408;
  double t1409;
  double t1410;
  double t1412;
  double t1413;
  double t1414;
  double t1415;
  double t1417;
  double t1418;
  double t1419;
  double t1420;
  double t1422;
  double t1423;
  double t1424;
  double t1425;
  double t1427;
  double t1428;
  double t1429;
  double t1430;
  double t1432;
  double t1433;
  double t1434;
  double t1435;
  double t1439;
  double t1440;
  double t1441;
  double t1443;
  double t1445;
  double t1446;
  double t1447;
  double t1448;
  double t1450;
  double t1451;
  double t1452;
  double t1453;
  double t1455;
  double t1456;
  double t1457;
  double t1458;
  double t1460;
  double t1461;
  double t1462;
  double t1463;
  double t1465;
  double t1466;
  double t1467;
  double t1468;
  double t1470;
  double t1471;
  double t1472;
  double t1473;
  double t1475;
  double t1476;
  double t1477;
  double t1478;
  double t1480;
  double t1481;
  double t1482;
  double t1483;
  double t1485;
  double t1486;
  double t1487;
  double t1488;
  double t1490;
  double t1491;
  double t1492;
  double t1493;
  double t1495;
  double t1496;
  double t1497;
  double t1498;
  double t1500;
  double t1501;
  double t1502;
  double t1503;
  t180 = Cos(var1[3]);
  t567 = Cos(var1[5]);
  t572 = Sin(var1[3]);
  t570 = Sin(var1[4]);
  t576 = Sin(var1[5]);
  t299 = Cos(var1[19]);
  t319 = -1.*t299;
  t326 = 1. + t319;
  t371 = Sin(var1[19]);
  t553 = Sin(var1[18]);
  t571 = t180*t567*t570;
  t590 = t572*t576;
  t591 = t571 + t590;
  t618 = Cos(var1[18]);
  t622 = -1.*t567*t572;
  t627 = t180*t570*t576;
  t628 = t622 + t627;
  t186 = Cos(var1[4]);
  t667 = -1.*t553*t591;
  t688 = t618*t628;
  t689 = t667 + t688;
  t717 = t618*t591;
  t721 = t553*t628;
  t722 = t717 + t721;
  t742 = Cos(var1[20]);
  t746 = -1.*t742;
  t749 = 1. + t746;
  t751 = Sin(var1[20]);
  t795 = -0.366501*t180*t186*t371;
  t796 = 0.340999127418*t326*t689;
  t799 = -0.134322983001*t326;
  t801 = 1. + t799;
  t802 = t801*t722;
  t816 = t795 + t796 + t802;
  t832 = 0.930418*t180*t186*t371;
  t833 = -0.8656776547239999*t326;
  t834 = 1. + t833;
  t836 = t834*t689;
  t837 = 0.340999127418*t326*t722;
  t838 = t832 + t836 + t837;
  t849 = -1.000000637725*t326;
  t862 = 1. + t849;
  t864 = t862*t180*t186;
  t865 = -0.930418*t371*t689;
  t868 = 0.366501*t371*t722;
  t873 = t864 + t865 + t868;
  t875 = Cos(var1[21]);
  t876 = -1.*t875;
  t877 = 1. + t876;
  t882 = Sin(var1[21]);
  t887 = 0.930418*t751*t816;
  t888 = 0.366501*t751*t838;
  t893 = -1.000000637725*t749;
  t894 = 1. + t893;
  t895 = t894*t873;
  t896 = t887 + t888 + t895;
  t902 = -0.8656776547239999*t749;
  t911 = 1. + t902;
  t917 = t911*t816;
  t918 = -0.340999127418*t749*t838;
  t920 = -0.930418*t751*t873;
  t928 = t917 + t918 + t920;
  t940 = -0.340999127418*t749*t816;
  t941 = -0.134322983001*t749;
  t945 = 1. + t941;
  t947 = t945*t838;
  t948 = -0.366501*t751*t873;
  t949 = t940 + t947 + t948;
  t957 = Cos(var1[22]);
  t960 = -1.*t957;
  t962 = 1. + t960;
  t965 = Sin(var1[22]);
  t972 = 0.366501*t882*t896;
  t974 = -0.340999127418*t877*t928;
  t975 = -0.134322983001*t877;
  t977 = 1. + t975;
  t978 = t977*t949;
  t979 = t972 + t974 + t978;
  t989 = 0.930418*t882*t896;
  t990 = -0.8656776547239999*t877;
  t994 = 1. + t990;
  t995 = t994*t928;
  t999 = -0.340999127418*t877*t949;
  t1000 = t989 + t995 + t999;
  t1007 = -1.000000637725*t877;
  t1008 = 1. + t1007;
  t1009 = t1008*t896;
  t1010 = -0.930418*t882*t928;
  t1011 = -0.366501*t882*t949;
  t1012 = t1009 + t1010 + t1011;
  t1015 = Cos(var1[23]);
  t1019 = -1.*t1015;
  t1020 = 1. + t1019;
  t1025 = Sin(var1[23]);
  t1028 = -0.366501*t965*t979;
  t1029 = -0.930418*t965*t1000;
  t1030 = -1.000000637725*t962;
  t1031 = 1. + t1030;
  t1032 = t1031*t1012;
  t1033 = t1028 + t1029 + t1032;
  t1039 = -0.134322983001*t962;
  t1043 = 1. + t1039;
  t1044 = t1043*t979;
  t1045 = -0.340999127418*t962*t1000;
  t1046 = 0.366501*t965*t1012;
  t1047 = t1044 + t1045 + t1046;
  t1058 = -0.340999127418*t962*t979;
  t1060 = -0.8656776547239999*t962;
  t1061 = 1. + t1060;
  t1064 = t1061*t1000;
  t1068 = 0.930418*t965*t1012;
  t1070 = t1058 + t1064 + t1068;
  t1075 = Cos(var1[24]);
  t1077 = -1.*t1075;
  t1078 = 1. + t1077;
  t1082 = Sin(var1[24]);
  t1138 = Cos(var1[25]);
  t1139 = -1.*t1138;
  t1140 = 1. + t1139;
  t1143 = Sin(var1[25]);
  t1090 = 0.930418*t1025*t1033;
  t1091 = -0.340999127418*t1020*t1047;
  t1092 = -0.8656776547239999*t1020;
  t1095 = 1. + t1092;
  t1096 = t1095*t1070;
  t1097 = t1090 + t1091 + t1096;
  t1106 = 0.366501*t1025*t1033;
  t1107 = -0.134322983001*t1020;
  t1108 = 1. + t1107;
  t1109 = t1108*t1047;
  t1114 = -0.340999127418*t1020*t1070;
  t1116 = t1106 + t1109 + t1114;
  t1126 = -1.000000637725*t1020;
  t1127 = 1. + t1126;
  t1128 = t1127*t1033;
  t1129 = -0.366501*t1025*t1047;
  t1130 = -0.930418*t1025*t1070;
  t1131 = t1128 + t1129 + t1130;
  t1150 = -0.175248972904*t1140;
  t1174 = -0.120666640478*t1140;
  t1142 = -0.444895486988*t1140;
  t1194 = 0.218018*t1143;
  t1158 = -0.930418*t1082*t1097;
  t1159 = -0.366501*t1082*t1116;
  t1160 = -1.000000637725*t1078;
  t1161 = 1. + t1160;
  t1162 = t1161*t1131;
  t1163 = t1158 + t1159 + t1162;
  t1191 = -0.803828*t1143;
  t1182 = -0.340999127418*t1078*t1097;
  t1183 = -0.134322983001*t1078;
  t1184 = 1. + t1183;
  t1185 = t1184*t1116;
  t1186 = 0.366501*t1082*t1131;
  t1187 = t1182 + t1185 + t1186;
  t1203 = -0.8656776547239999*t1078;
  t1207 = 1. + t1203;
  t1208 = t1207*t1097;
  t1209 = -0.340999127418*t1078*t1116;
  t1214 = 0.930418*t1082*t1131;
  t1215 = t1208 + t1209 + t1214;
  t1151 = 0.553471*t1143;
  t1217 = 0.444895486988*t1140;
  t1147 = -0.218018*t1143;
  t1242 = 0.175248972904*t1140;
  t1168 = -0.553471*t1143;
  t1222 = 0.120666640478*t1140;
  t1175 = 0.803828*t1143;
  t370 = -0.04500040093286238*t326;
  t403 = 0.0846680539949003*t371;
  t525 = t370 + t403;
  t620 = -1.*t618;
  t621 = 1. + t620;
  t644 = 1.296332362046933e-7*var1[19];
  t649 = -0.07877668146182712*t326;
  t664 = -0.04186915633414423*t371;
  t665 = t644 + t649 + t664;
  t1263 = t567*t572*t570;
  t1264 = -1.*t180*t576;
  t1265 = t1263 + t1264;
  t1267 = t180*t567;
  t1268 = t572*t570*t576;
  t1269 = t1267 + t1268;
  t694 = 3.2909349868922137e-7*var1[19];
  t699 = 0.03103092645718495*t326;
  t708 = 0.016492681424499736*t371;
  t716 = t694 + t699 + t708;
  t724 = -1.296332362046933e-7*var1[20];
  t750 = -0.14128592423750855*t749;
  t784 = 0.04186915633414423*t751;
  t793 = t724 + t750 + t784;
  t1271 = -1.*t553*t1265;
  t1272 = t618*t1269;
  t1273 = t1271 + t1272;
  t1278 = t618*t1265;
  t1279 = t553*t1269;
  t1280 = t1278 + t1279;
  t820 = 3.2909349868922137e-7*var1[20];
  t821 = -0.055653945343889656*t749;
  t823 = 0.016492681424499736*t751;
  t828 = t820 + t821 + t823;
  t842 = -0.04500040093286238*t749;
  t843 = -0.15185209683981668*t751;
  t844 = t842 + t843;
  t878 = 0.039853038461262744*t877;
  t885 = 0.23670515095269612*t882;
  t886 = t878 + t885;
  t1282 = -0.366501*t186*t371*t572;
  t1283 = 0.340999127418*t326*t1273;
  t1284 = t801*t1280;
  t1285 = t1282 + t1283 + t1284;
  t1287 = 0.930418*t186*t371*t572;
  t1288 = t834*t1273;
  t1289 = 0.340999127418*t326*t1280;
  t1293 = t1287 + t1288 + t1289;
  t1295 = t862*t186*t572;
  t1296 = -0.930418*t371*t1273;
  t1297 = 0.366501*t371*t1280;
  t1298 = t1295 + t1296 + t1297;
  t898 = 6.295460977284962e-8*var1[21];
  t899 = -0.22023473313910558*t877;
  t900 = 0.03707996069223323*t882;
  t901 = t898 + t899 + t900;
  t931 = -1.5981976069815686e-7*var1[21];
  t936 = -0.08675267452931407*t877;
  t937 = 0.014606169134372047*t882;
  t939 = t931 + t936 + t937;
  t952 = -4.0833068682577724e-7*var1[22];
  t963 = -0.11476729583292707*t962;
  t966 = 0.0111594154470601*t965;
  t967 = t952 + t963 + t966;
  t1300 = 0.930418*t751*t1285;
  t1304 = 0.366501*t751*t1293;
  t1305 = t894*t1298;
  t1306 = t1300 + t1304 + t1305;
  t1308 = t911*t1285;
  t1309 = -0.340999127418*t749*t1293;
  t1310 = -0.930418*t751*t1298;
  t1311 = t1308 + t1309 + t1310;
  t1313 = -0.340999127418*t749*t1285;
  t1314 = t945*t1293;
  t1315 = -0.366501*t751*t1298;
  t1316 = t1313 + t1314 + t1315;
  t981 = 1.6084556086870008e-7*var1[22];
  t982 = -0.29135406957765553*t962;
  t985 = 0.02832985722118838*t965;
  t987 = t981 + t982 + t985;
  t1003 = 0.03044854601678662*t962;
  t1005 = 0.3131431996991197*t965;
  t1006 = t1003 + t1005;
  t1024 = -0.26285954081199375*t1020;
  t1026 = 0.634735404786378*t1025;
  t1027 = t1024 + t1026;
  t1318 = 0.366501*t882*t1306;
  t1319 = -0.340999127418*t877*t1311;
  t1320 = t977*t1316;
  t1321 = t1318 + t1319 + t1320;
  t1326 = 0.930418*t882*t1306;
  t1327 = t994*t1311;
  t1332 = -0.340999127418*t877*t1316;
  t1333 = t1326 + t1327 + t1332;
  t1335 = t1008*t1306;
  t1336 = -0.930418*t882*t1311;
  t1337 = -0.366501*t882*t1316;
  t1338 = t1335 + t1336 + t1337;
  t1035 = 1.6169269214444473e-7*var1[23];
  t1036 = -0.2326311605896123*t1020;
  t1037 = -0.09633822312984319*t1025;
  t1038 = t1035 + t1036 + t1037;
  t1049 = -6.369237629068993e-8*var1[23];
  t1050 = -0.5905692458505322*t1020;
  t1051 = -0.24456909227538925*t1025;
  t1055 = t1049 + t1050 + t1051;
  t1074 = -7.041766963257243e-8*var1[24];
  t1079 = -0.8232948486053725*t1078;
  t1083 = 0.05763710717422546*t1082;
  t1084 = t1074 + t1079 + t1083;
  t1340 = -0.366501*t965*t1321;
  t1341 = -0.930418*t965*t1333;
  t1342 = t1031*t1338;
  t1343 = t1340 + t1341 + t1342;
  t1345 = t1043*t1321;
  t1346 = -0.340999127418*t962*t1333;
  t1347 = 0.366501*t965*t1338;
  t1348 = t1345 + t1346 + t1347;
  t1350 = -0.340999127418*t962*t1321;
  t1351 = t1061*t1333;
  t1352 = 0.930418*t965*t1338;
  t1353 = t1350 + t1351 + t1352;
  t1100 = 1.7876586242383724e-7*var1[24];
  t1101 = -0.3243041141817093*t1078;
  t1102 = 0.02270383571304597*t1082;
  t1104 = t1100 + t1101 + t1102;
  t1120 = 0.06194758047549556*t1078;
  t1123 = 0.8848655643005321*t1082;
  t1125 = t1120 + t1123;
  t1133 = 2.7989049814696287e-7*var1[25];
  t1141 = 0.15748067958019524*t1140;
  t1148 = t1142 + t1147;
  t1149 = -0.528674719304*t1148;
  t1152 = t1150 + t1151;
  t1153 = -0.29871295412*t1152;
  t1154 = t1133 + t1141 + t1149 + t1153;
  t1355 = 0.930418*t1025*t1343;
  t1356 = -0.340999127418*t1020*t1348;
  t1357 = t1095*t1353;
  t1358 = t1355 + t1356 + t1357;
  t1360 = 0.366501*t1025*t1343;
  t1361 = t1108*t1348;
  t1362 = -0.340999127418*t1020*t1353;
  t1363 = t1360 + t1361 + t1362;
  t1365 = t1127*t1343;
  t1366 = -0.366501*t1025*t1348;
  t1367 = -0.930418*t1025*t1353;
  t1368 = t1365 + t1366 + t1367;
  t1166 = 7.591321355439789e-8*var1[25];
  t1167 = -0.2845150083511607*t1140;
  t1169 = t1150 + t1168;
  t1170 = 0.445034169498*t1169;
  t1176 = t1174 + t1175;
  t1177 = -0.528674719304*t1176;
  t1178 = t1166 + t1167 + t1170 + t1177;
  t1189 = 1.9271694180831932e-7*var1[25];
  t1190 = -0.3667264808254521*t1140;
  t1192 = t1174 + t1191;
  t1193 = -0.29871295412*t1192;
  t1195 = t1142 + t1194;
  t1196 = 0.445034169498*t1195;
  t1197 = t1189 + t1190 + t1193 + t1196;
  t1220 = t1217 + t1194;
  t1370 = -0.930418*t1082*t1358;
  t1371 = -0.366501*t1082*t1363;
  t1372 = t1161*t1368;
  t1373 = t1370 + t1371 + t1372;
  t1223 = t1222 + t1191;
  t1375 = -0.340999127418*t1078*t1358;
  t1376 = t1184*t1363;
  t1377 = 0.366501*t1082*t1368;
  t1378 = t1375 + t1376 + t1377;
  t1225 = -0.693671301908*t1140;
  t1229 = 1. + t1225;
  t1380 = t1207*t1358;
  t1381 = -0.340999127418*t1078*t1363;
  t1382 = 0.930418*t1082*t1368;
  t1383 = t1380 + t1381 + t1382;
  t1235 = -0.353861996165*t1140;
  t1238 = 1. + t1235;
  t1243 = t1242 + t1151;
  t1245 = t1217 + t1147;
  t1249 = t1242 + t1168;
  t1251 = -0.952469601425*t1140;
  t1252 = 1. + t1251;
  t1254 = t1222 + t1175;
  t1404 = -1.*t186*t567*t553;
  t1405 = t618*t186*t576;
  t1406 = t1404 + t1405;
  t1408 = t618*t186*t567;
  t1409 = t186*t553*t576;
  t1410 = t1408 + t1409;
  t1412 = 0.366501*t371*t570;
  t1413 = 0.340999127418*t326*t1406;
  t1414 = t801*t1410;
  t1415 = t1412 + t1413 + t1414;
  t1417 = -0.930418*t371*t570;
  t1418 = t834*t1406;
  t1419 = 0.340999127418*t326*t1410;
  t1420 = t1417 + t1418 + t1419;
  t1422 = -1.*t862*t570;
  t1423 = -0.930418*t371*t1406;
  t1424 = 0.366501*t371*t1410;
  t1425 = t1422 + t1423 + t1424;
  t1427 = 0.930418*t751*t1415;
  t1428 = 0.366501*t751*t1420;
  t1429 = t894*t1425;
  t1430 = t1427 + t1428 + t1429;
  t1432 = t911*t1415;
  t1433 = -0.340999127418*t749*t1420;
  t1434 = -0.930418*t751*t1425;
  t1435 = t1432 + t1433 + t1434;
  t1439 = -0.340999127418*t749*t1415;
  t1440 = t945*t1420;
  t1441 = -0.366501*t751*t1425;
  t1443 = t1439 + t1440 + t1441;
  t1445 = 0.366501*t882*t1430;
  t1446 = -0.340999127418*t877*t1435;
  t1447 = t977*t1443;
  t1448 = t1445 + t1446 + t1447;
  t1450 = 0.930418*t882*t1430;
  t1451 = t994*t1435;
  t1452 = -0.340999127418*t877*t1443;
  t1453 = t1450 + t1451 + t1452;
  t1455 = t1008*t1430;
  t1456 = -0.930418*t882*t1435;
  t1457 = -0.366501*t882*t1443;
  t1458 = t1455 + t1456 + t1457;
  t1460 = -0.366501*t965*t1448;
  t1461 = -0.930418*t965*t1453;
  t1462 = t1031*t1458;
  t1463 = t1460 + t1461 + t1462;
  t1465 = t1043*t1448;
  t1466 = -0.340999127418*t962*t1453;
  t1467 = 0.366501*t965*t1458;
  t1468 = t1465 + t1466 + t1467;
  t1470 = -0.340999127418*t962*t1448;
  t1471 = t1061*t1453;
  t1472 = 0.930418*t965*t1458;
  t1473 = t1470 + t1471 + t1472;
  t1475 = 0.930418*t1025*t1463;
  t1476 = -0.340999127418*t1020*t1468;
  t1477 = t1095*t1473;
  t1478 = t1475 + t1476 + t1477;
  t1480 = 0.366501*t1025*t1463;
  t1481 = t1108*t1468;
  t1482 = -0.340999127418*t1020*t1473;
  t1483 = t1480 + t1481 + t1482;
  t1485 = t1127*t1463;
  t1486 = -0.366501*t1025*t1468;
  t1487 = -0.930418*t1025*t1473;
  t1488 = t1485 + t1486 + t1487;
  t1490 = -0.930418*t1082*t1478;
  t1491 = -0.366501*t1082*t1483;
  t1492 = t1161*t1488;
  t1493 = t1490 + t1491 + t1492;
  t1495 = -0.340999127418*t1078*t1478;
  t1496 = t1184*t1483;
  t1497 = 0.366501*t1082*t1488;
  t1498 = t1495 + t1496 + t1497;
  t1500 = t1207*t1478;
  t1501 = -0.340999127418*t1078*t1483;
  t1502 = 0.930418*t1082*t1488;
  t1503 = t1500 + t1501 + t1502;
  p_output1[0]=t1006*t1012 + t1027*t1033 + t1038*t1047 + t1055*t1070 + t1084*t1097 + t1104*t1116 + t1125*t1131 + t1154*t1163 + t1178*t1187 + t1197*t1215 - 0.8394*(t1163*t1220 + t1187*t1223 + t1215*t1229) + 0.175493*(t1163*t1238 + t1187*t1243 + t1215*t1245) - 0.421111*(t1163*t1249 + t1187*t1252 + t1215*t1254) + t180*t186*t525 - 0.091*t553*t591 - 0.091*t621*t628 + t665*t689 + t716*t722 + t793*t816 + t828*t838 + t844*t873 + t886*t896 + t901*t928 + t939*t949 + t967*t979 + t1000*t987 + var1[0];
  p_output1[1]=t1006*t1338 + t1027*t1343 + t1038*t1348 + t1055*t1353 + t1084*t1358 + t1104*t1363 + t1125*t1368 + t1154*t1373 + t1178*t1378 + t1197*t1383 - 0.8394*(t1220*t1373 + t1223*t1378 + t1229*t1383) + 0.175493*(t1238*t1373 + t1243*t1378 + t1245*t1383) - 0.421111*(t1249*t1373 + t1252*t1378 + t1254*t1383) - 0.091*t1265*t553 + t186*t525*t572 - 0.091*t1269*t621 + t1273*t665 + t1280*t716 + t1285*t793 + t1293*t828 + t1298*t844 + t1306*t886 + t1311*t901 + t1316*t939 + t1321*t967 + t1333*t987 + var1[1];
  p_output1[2]=t1006*t1458 + t1027*t1463 + t1038*t1468 + t1055*t1473 + t1084*t1478 + t1104*t1483 + t1125*t1488 + t1154*t1493 + t1178*t1498 + t1197*t1503 - 0.8394*(t1220*t1493 + t1223*t1498 + t1229*t1503) + 0.175493*(t1238*t1493 + t1243*t1498 + t1245*t1503) - 0.421111*(t1249*t1493 + t1252*t1498 + t1254*t1503) - 0.091*t186*t553*t567 - 1.*t525*t570 - 0.091*t186*t576*t621 + t1406*t665 + t1410*t716 + t1415*t793 + t1420*t828 + t1425*t844 + t1430*t886 + t1435*t901 + t1443*t939 + t1448*t967 + t1453*t987 + var1[2];
}



void gen::kin::p_RightToeFront(Eigen::Ref<Eigen::VectorXd> p_output1, const Eigen::Ref<const Eigen::VectorXd> var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
