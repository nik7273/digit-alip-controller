/*
 * Automatically Generated from Mathematica.
 * Wed 27 Oct 2021 22:54:36 GMT-04:00
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <eigen3/Eigen/Dense>

#include "gen/kin/p_toe_pitch_joint_left.hh"

#ifdef _MSC_VER
  #define INLINE __forceinline /* use __forceinline (VC++ specific) */
#else
  #define INLINE inline        /* use standard inline */
#endif

/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
INLINE double Power(double x, double y) { return pow(x, y); }
INLINE double Sqrt(double x) { return sqrt(x); }

INLINE double Abs(double x) { return fabs(x); }

INLINE double Exp(double x) { return exp(x); }
INLINE double Log(double x) { return log(x); }

INLINE double Sin(double x) { return sin(x); }
INLINE double Cos(double x) { return cos(x); }
INLINE double Tan(double x) { return tan(x); }

INLINE double ArcSin(double x) { return asin(x); }
INLINE double ArcCos(double x) { return acos(x); }
//INLINE double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
INLINE double ArcTan(double x, double y) { return atan2(y,x); }

INLINE double Sinh(double x) { return sinh(x); }
INLINE double Cosh(double x) { return cosh(x); }
INLINE double Tanh(double x) { return tanh(x); }

#define E 2.71828182845904523536029
#define Pi 3.14159265358979323846264
#define Degree 0.01745329251994329576924

INLINE double Sec(double x) { return 1/cos(x); }
INLINE double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(Eigen::Ref<Eigen::VectorXd> p_output1,const Eigen::Ref<const Eigen::VectorXd> var1)
{
  double t2695;
  double t2230;
  double t2697;
  double t2657;
  double t2701;
  double t114;
  double t2694;
  double t2710;
  double t2714;
  double t2716;
  double t2717;
  double t2740;
  double t2745;
  double t2758;
  double t2763;
  double t2764;
  double t2774;
  double t2790;
  double t2830;
  double t2833;
  double t2865;
  double t2870;
  double t2871;
  double t2747;
  double t2916;
  double t2917;
  double t2926;
  double t2931;
  double t2962;
  double t2966;
  double t2969;
  double t2977;
  double t2978;
  double t2981;
  double t2885;
  double t2889;
  double t2899;
  double t2900;
  double t2907;
  double t2910;
  double t2939;
  double t2940;
  double t2941;
  double t2942;
  double t2943;
  double t2944;
  double t2994;
  double t2998;
  double t2999;
  double t3006;
  double t3011;
  double t3012;
  double t3013;
  double t3014;
  double t3016;
  double t3017;
  double t3029;
  double t3031;
  double t3032;
  double t3033;
  double t3034;
  double t3037;
  double t3045;
  double t3046;
  double t3047;
  double t3049;
  double t3053;
  double t3054;
  double t3057;
  double t3061;
  double t3062;
  double t3064;
  double t3067;
  double t3072;
  double t3073;
  double t3074;
  double t3075;
  double t3076;
  double t3083;
  double t3084;
  double t3085;
  double t3089;
  double t3090;
  double t3092;
  double t3100;
  double t3101;
  double t3103;
  double t3105;
  double t3107;
  double t3108;
  double t3112;
  double t3113;
  double t3119;
  double t3124;
  double t3129;
  double t3130;
  double t3131;
  double t3132;
  double t3135;
  double t3136;
  double t3145;
  double t3146;
  double t3148;
  double t3149;
  double t3153;
  double t3154;
  double t3162;
  double t3163;
  double t3164;
  double t3171;
  double t3172;
  double t3173;
  double t3176;
  double t3177;
  double t3178;
  double t3180;
  double t3183;
  double t3184;
  double t3185;
  double t3186;
  double t3187;
  double t3188;
  double t3198;
  double t3201;
  double t3202;
  double t3203;
  double t3204;
  double t3208;
  double t3213;
  double t3214;
  double t3215;
  double t3216;
  double t3220;
  double t3221;
  double t1290;
  double t2215;
  double t2773;
  double t2775;
  double t2784;
  double t3252;
  double t3253;
  double t3254;
  double t3256;
  double t3257;
  double t3258;
  double t2835;
  double t2844;
  double t2846;
  double t2851;
  double t2872;
  double t2873;
  double t2877;
  double t2880;
  double t3261;
  double t3262;
  double t3263;
  double t3265;
  double t3266;
  double t3267;
  double t2914;
  double t2927;
  double t2932;
  double t2933;
  double t2945;
  double t2948;
  double t2949;
  double t2950;
  double t2984;
  double t2986;
  double t2990;
  double t3003;
  double t3008;
  double t3009;
  double t3279;
  double t3280;
  double t3281;
  double t3282;
  double t3269;
  double t3270;
  double t3271;
  double t3272;
  double t3274;
  double t3275;
  double t3276;
  double t3277;
  double t3019;
  double t3021;
  double t3025;
  double t3027;
  double t3041;
  double t3042;
  double t3043;
  double t3044;
  double t3056;
  double t3063;
  double t3065;
  double t3066;
  double t3284;
  double t3285;
  double t3286;
  double t3287;
  double t3289;
  double t3290;
  double t3291;
  double t3292;
  double t3294;
  double t3295;
  double t3296;
  double t3297;
  double t3078;
  double t3080;
  double t3081;
  double t3082;
  double t3094;
  double t3095;
  double t3099;
  double t3120;
  double t3127;
  double t3128;
  double t3299;
  double t3300;
  double t3301;
  double t3302;
  double t3304;
  double t3305;
  double t3306;
  double t3307;
  double t3309;
  double t3310;
  double t3311;
  double t3312;
  double t3138;
  double t3142;
  double t3143;
  double t3144;
  double t3156;
  double t3158;
  double t3159;
  double t3160;
  double t3175;
  double t3179;
  double t3181;
  double t3182;
  double t3314;
  double t3315;
  double t3316;
  double t3317;
  double t3321;
  double t3322;
  double t3323;
  double t3327;
  double t3329;
  double t3332;
  double t3333;
  double t3334;
  double t3190;
  double t3191;
  double t3196;
  double t3197;
  double t3210;
  double t3211;
  double t3212;
  double t3336;
  double t3337;
  double t3338;
  double t3339;
  double t3341;
  double t3342;
  double t3343;
  double t3344;
  double t3225;
  double t3226;
  double t3346;
  double t3347;
  double t3348;
  double t3349;
  double t3231;
  double t3238;
  double t3244;
  double t3245;
  double t3377;
  double t3378;
  double t3379;
  double t3381;
  double t3382;
  double t3383;
  double t3395;
  double t3396;
  double t3397;
  double t3398;
  double t3390;
  double t3391;
  double t3392;
  double t3393;
  double t3385;
  double t3386;
  double t3387;
  double t3388;
  double t3400;
  double t3401;
  double t3402;
  double t3403;
  double t3405;
  double t3407;
  double t3408;
  double t3409;
  double t3411;
  double t3412;
  double t3413;
  double t3414;
  double t3416;
  double t3417;
  double t3418;
  double t3419;
  double t3423;
  double t3424;
  double t3425;
  double t3426;
  double t3429;
  double t3430;
  double t3431;
  double t3432;
  double t3434;
  double t3435;
  double t3436;
  double t3437;
  double t3440;
  double t3442;
  double t3443;
  double t3444;
  double t3446;
  double t3447;
  double t3448;
  double t3449;
  double t3451;
  double t3452;
  double t3453;
  double t3454;
  double t3456;
  double t3457;
  double t3458;
  double t3459;
  double t3461;
  double t3462;
  double t3463;
  double t3464;
  t2695 = Cos(var1[3]);
  t2230 = Cos(var1[5]);
  t2697 = Sin(var1[4]);
  t2657 = Sin(var1[3]);
  t2701 = Sin(var1[5]);
  t114 = Cos(var1[6]);
  t2694 = -1.*t2230*t2657;
  t2710 = t2695*t2697*t2701;
  t2714 = t2694 + t2710;
  t2716 = t2695*t2230*t2697;
  t2717 = t2657*t2701;
  t2740 = t2716 + t2717;
  t2745 = Sin(var1[6]);
  t2758 = Cos(var1[7]);
  t2763 = -1.*t2758;
  t2764 = 1. + t2763;
  t2774 = Sin(var1[7]);
  t2790 = t114*t2714;
  t2830 = -1.*t2740*t2745;
  t2833 = t2790 + t2830;
  t2865 = t114*t2740;
  t2870 = t2714*t2745;
  t2871 = t2865 + t2870;
  t2747 = Cos(var1[4]);
  t2916 = Cos(var1[8]);
  t2917 = -1.*t2916;
  t2926 = 1. + t2917;
  t2931 = Sin(var1[8]);
  t2962 = -1.000000637725*t2764;
  t2966 = 1. + t2962;
  t2969 = t2695*t2747*t2966;
  t2977 = -0.930418*t2833*t2774;
  t2978 = -0.366501*t2871*t2774;
  t2981 = t2969 + t2977 + t2978;
  t2885 = -0.340999127418*t2764*t2833;
  t2889 = -0.134322983001*t2764;
  t2899 = 1. + t2889;
  t2900 = t2899*t2871;
  t2907 = 0.366501*t2695*t2747*t2774;
  t2910 = t2885 + t2900 + t2907;
  t2939 = -0.8656776547239999*t2764;
  t2940 = 1. + t2939;
  t2941 = t2940*t2833;
  t2942 = -0.340999127418*t2764*t2871;
  t2943 = 0.930418*t2695*t2747*t2774;
  t2944 = t2941 + t2942 + t2943;
  t2994 = Cos(var1[9]);
  t2998 = -1.*t2994;
  t2999 = 1. + t2998;
  t3006 = Sin(var1[9]);
  t3011 = -1.000000637725*t2926;
  t3012 = 1. + t3011;
  t3013 = t3012*t2981;
  t3014 = -0.930418*t2910*t2931;
  t3016 = 0.366501*t2944*t2931;
  t3017 = t3013 + t3014 + t3016;
  t3029 = 0.340999127418*t2926*t2910;
  t3031 = -0.134322983001*t2926;
  t3032 = 1. + t3031;
  t3033 = t3032*t2944;
  t3034 = -0.366501*t2981*t2931;
  t3037 = t3029 + t3033 + t3034;
  t3045 = -0.8656776547239999*t2926;
  t3046 = 1. + t3045;
  t3047 = t3046*t2910;
  t3049 = 0.340999127418*t2926*t2944;
  t3053 = 0.930418*t2981*t2931;
  t3054 = t3047 + t3049 + t3053;
  t3057 = Cos(var1[10]);
  t3061 = -1.*t3057;
  t3062 = 1. + t3061;
  t3064 = Sin(var1[10]);
  t3067 = -0.930418*t3006*t3017;
  t3072 = 0.340999127418*t2999*t3037;
  t3073 = -0.8656776547239999*t2999;
  t3074 = 1. + t3073;
  t3075 = t3074*t3054;
  t3076 = t3067 + t3072 + t3075;
  t3083 = 0.366501*t3006*t3017;
  t3084 = -0.134322983001*t2999;
  t3085 = 1. + t3084;
  t3089 = t3085*t3037;
  t3090 = 0.340999127418*t2999*t3054;
  t3092 = t3083 + t3089 + t3090;
  t3100 = -1.000000637725*t2999;
  t3101 = 1. + t3100;
  t3103 = t3101*t3017;
  t3105 = -0.366501*t3006*t3037;
  t3107 = 0.930418*t3006*t3054;
  t3108 = t3103 + t3105 + t3107;
  t3112 = Cos(var1[11]);
  t3113 = -1.*t3112;
  t3119 = 1. + t3113;
  t3124 = Sin(var1[11]);
  t3129 = 0.930418*t3064*t3076;
  t3130 = -0.366501*t3064*t3092;
  t3131 = -1.000000637725*t3062;
  t3132 = 1. + t3131;
  t3135 = t3132*t3108;
  t3136 = t3129 + t3130 + t3135;
  t3145 = -0.8656776547239999*t3062;
  t3146 = 1. + t3145;
  t3148 = t3146*t3076;
  t3149 = 0.340999127418*t3062*t3092;
  t3153 = -0.930418*t3064*t3108;
  t3154 = t3148 + t3149 + t3153;
  t3162 = 0.340999127418*t3062*t3076;
  t3163 = -0.134322983001*t3062;
  t3164 = 1. + t3163;
  t3171 = t3164*t3092;
  t3172 = 0.366501*t3064*t3108;
  t3173 = t3162 + t3171 + t3172;
  t3176 = Cos(var1[12]);
  t3177 = -1.*t3176;
  t3178 = 1. + t3177;
  t3180 = Sin(var1[12]);
  t3183 = 0.366501*t3124*t3136;
  t3184 = 0.340999127418*t3119*t3154;
  t3185 = -0.134322983001*t3119;
  t3186 = 1. + t3185;
  t3187 = t3186*t3173;
  t3188 = t3183 + t3184 + t3187;
  t3198 = -0.930418*t3124*t3136;
  t3201 = -0.8656776547239999*t3119;
  t3202 = 1. + t3201;
  t3203 = t3202*t3154;
  t3204 = 0.340999127418*t3119*t3173;
  t3208 = t3198 + t3203 + t3204;
  t3213 = -1.000000637725*t3119;
  t3214 = 1. + t3213;
  t3215 = t3214*t3136;
  t3216 = 0.930418*t3124*t3154;
  t3220 = -0.366501*t3124*t3173;
  t3221 = t3215 + t3216 + t3220;
  t1290 = -1.*t114;
  t2215 = 1. + t1290;
  t2773 = -0.04500040093286238*t2764;
  t2775 = -0.0846680539949003*t2774;
  t2784 = t2773 + t2775;
  t3252 = t2695*t2230;
  t3253 = t2657*t2697*t2701;
  t3254 = t3252 + t3253;
  t3256 = t2230*t2657*t2697;
  t3257 = -1.*t2695*t2701;
  t3258 = t3256 + t3257;
  t2835 = 1.296332362046933e-7*var1[7];
  t2844 = 0.07877668146182712*t2764;
  t2846 = -0.04186915633414423*t2774;
  t2851 = t2835 + t2844 + t2846;
  t2872 = -3.2909349868922137e-7*var1[7];
  t2873 = 0.03103092645718495*t2764;
  t2877 = -0.016492681424499736*t2774;
  t2880 = t2872 + t2873 + t2877;
  t3261 = t114*t3254;
  t3262 = -1.*t3258*t2745;
  t3263 = t3261 + t3262;
  t3265 = t114*t3258;
  t3266 = t3254*t2745;
  t3267 = t3265 + t3266;
  t2914 = 1.296332362046933e-7*var1[8];
  t2927 = -0.14128592423750855*t2926;
  t2932 = -0.04186915633414423*t2931;
  t2933 = t2914 + t2927 + t2932;
  t2945 = 3.2909349868922137e-7*var1[8];
  t2948 = 0.055653945343889656*t2926;
  t2949 = 0.016492681424499736*t2931;
  t2950 = t2945 + t2948 + t2949;
  t2984 = -0.04500040093286238*t2926;
  t2986 = 0.15185209683981668*t2931;
  t2990 = t2984 + t2986;
  t3003 = 0.039853038461262744*t2999;
  t3008 = -0.23670515095269612*t3006;
  t3009 = t3003 + t3008;
  t3279 = t2747*t2966*t2657;
  t3280 = -0.930418*t3263*t2774;
  t3281 = -0.366501*t3267*t2774;
  t3282 = t3279 + t3280 + t3281;
  t3269 = -0.340999127418*t2764*t3263;
  t3270 = t2899*t3267;
  t3271 = 0.366501*t2747*t2657*t2774;
  t3272 = t3269 + t3270 + t3271;
  t3274 = t2940*t3263;
  t3275 = -0.340999127418*t2764*t3267;
  t3276 = 0.930418*t2747*t2657*t2774;
  t3277 = t3274 + t3275 + t3276;
  t3019 = -1.5981976069815686e-7*var1[9];
  t3021 = 0.08675267452931407*t2999;
  t3025 = 0.014606169134372047*t3006;
  t3027 = t3019 + t3021 + t3025;
  t3041 = -6.295460977284962e-8*var1[9];
  t3042 = -0.22023473313910558*t2999;
  t3043 = -0.03707996069223323*t3006;
  t3044 = t3041 + t3042 + t3043;
  t3056 = -1.6084556086870008e-7*var1[10];
  t3063 = -0.29135406957765553*t3062;
  t3065 = -0.02832985722118838*t3064;
  t3066 = t3056 + t3063 + t3065;
  t3284 = t3012*t3282;
  t3285 = -0.930418*t3272*t2931;
  t3286 = 0.366501*t3277*t2931;
  t3287 = t3284 + t3285 + t3286;
  t3289 = 0.340999127418*t2926*t3272;
  t3290 = t3032*t3277;
  t3291 = -0.366501*t3282*t2931;
  t3292 = t3289 + t3290 + t3291;
  t3294 = t3046*t3272;
  t3295 = 0.340999127418*t2926*t3277;
  t3296 = 0.930418*t3282*t2931;
  t3297 = t3294 + t3295 + t3296;
  t3078 = -4.0833068682577724e-7*var1[10];
  t3080 = 0.11476729583292707*t3062;
  t3081 = 0.0111594154470601*t3064;
  t3082 = t3078 + t3080 + t3081;
  t3094 = 0.03044854601678662*t3062;
  t3095 = -0.3131431996991197*t3064;
  t3099 = t3094 + t3095;
  t3120 = -0.26285954081199375*t3119;
  t3127 = -0.634735404786378*t3124;
  t3128 = t3120 + t3127;
  t3299 = -0.930418*t3006*t3287;
  t3300 = 0.340999127418*t2999*t3292;
  t3301 = t3074*t3297;
  t3302 = t3299 + t3300 + t3301;
  t3304 = 0.366501*t3006*t3287;
  t3305 = t3085*t3292;
  t3306 = 0.340999127418*t2999*t3297;
  t3307 = t3304 + t3305 + t3306;
  t3309 = t3101*t3287;
  t3310 = -0.366501*t3006*t3292;
  t3311 = 0.930418*t3006*t3297;
  t3312 = t3309 + t3310 + t3311;
  t3138 = 6.369237629068993e-8*var1[11];
  t3142 = -0.5905692458505322*t3119;
  t3143 = 0.24456909227538925*t3124;
  t3144 = t3138 + t3142 + t3143;
  t3156 = 1.6169269214444473e-7*var1[11];
  t3158 = 0.2326311605896123*t3119;
  t3159 = -0.09633822312984319*t3124;
  t3160 = t3156 + t3158 + t3159;
  t3175 = 1.7876586242383724e-7*var1[12];
  t3179 = 0.3243041141817093*t3178;
  t3181 = 0.02270383571304597*t3180;
  t3182 = t3175 + t3179 + t3181;
  t3314 = 0.930418*t3064*t3302;
  t3315 = -0.366501*t3064*t3307;
  t3316 = t3132*t3312;
  t3317 = t3314 + t3315 + t3316;
  t3321 = t3146*t3302;
  t3322 = 0.340999127418*t3062*t3307;
  t3323 = -0.930418*t3064*t3312;
  t3327 = t3321 + t3322 + t3323;
  t3329 = 0.340999127418*t3062*t3302;
  t3332 = t3164*t3307;
  t3333 = 0.366501*t3064*t3312;
  t3334 = t3329 + t3332 + t3333;
  t3190 = 7.041766963257243e-8*var1[12];
  t3191 = -0.8232948486053725*t3178;
  t3196 = -0.05763710717422546*t3180;
  t3197 = t3190 + t3191 + t3196;
  t3210 = 0.06194758047549556*t3178;
  t3211 = -0.8848655643005321*t3180;
  t3212 = t3210 + t3211;
  t3336 = 0.366501*t3124*t3317;
  t3337 = 0.340999127418*t3119*t3327;
  t3338 = t3186*t3334;
  t3339 = t3336 + t3337 + t3338;
  t3341 = -0.930418*t3124*t3317;
  t3342 = t3202*t3327;
  t3343 = 0.340999127418*t3119*t3334;
  t3344 = t3341 + t3342 + t3343;
  t3225 = -1.000000637725*t3178;
  t3226 = 1. + t3225;
  t3346 = t3214*t3317;
  t3347 = 0.930418*t3124*t3327;
  t3348 = -0.366501*t3124*t3334;
  t3349 = t3346 + t3347 + t3348;
  t3231 = -0.8656776547239999*t3178;
  t3238 = 1. + t3231;
  t3244 = -0.134322983001*t3178;
  t3245 = 1. + t3244;
  t3377 = t2747*t114*t2701;
  t3378 = -1.*t2747*t2230*t2745;
  t3379 = t3377 + t3378;
  t3381 = t2747*t2230*t114;
  t3382 = t2747*t2701*t2745;
  t3383 = t3381 + t3382;
  t3395 = -1.*t2966*t2697;
  t3396 = -0.930418*t3379*t2774;
  t3397 = -0.366501*t3383*t2774;
  t3398 = t3395 + t3396 + t3397;
  t3390 = t2940*t3379;
  t3391 = -0.340999127418*t2764*t3383;
  t3392 = -0.930418*t2697*t2774;
  t3393 = t3390 + t3391 + t3392;
  t3385 = -0.340999127418*t2764*t3379;
  t3386 = t2899*t3383;
  t3387 = -0.366501*t2697*t2774;
  t3388 = t3385 + t3386 + t3387;
  t3400 = t3012*t3398;
  t3401 = 0.366501*t3393*t2931;
  t3402 = -0.930418*t3388*t2931;
  t3403 = t3400 + t3401 + t3402;
  t3405 = t3032*t3393;
  t3407 = 0.340999127418*t2926*t3388;
  t3408 = -0.366501*t3398*t2931;
  t3409 = t3405 + t3407 + t3408;
  t3411 = 0.340999127418*t2926*t3393;
  t3412 = t3046*t3388;
  t3413 = 0.930418*t3398*t2931;
  t3414 = t3411 + t3412 + t3413;
  t3416 = -0.930418*t3006*t3403;
  t3417 = 0.340999127418*t2999*t3409;
  t3418 = t3074*t3414;
  t3419 = t3416 + t3417 + t3418;
  t3423 = 0.366501*t3006*t3403;
  t3424 = t3085*t3409;
  t3425 = 0.340999127418*t2999*t3414;
  t3426 = t3423 + t3424 + t3425;
  t3429 = t3101*t3403;
  t3430 = -0.366501*t3006*t3409;
  t3431 = 0.930418*t3006*t3414;
  t3432 = t3429 + t3430 + t3431;
  t3434 = 0.930418*t3064*t3419;
  t3435 = -0.366501*t3064*t3426;
  t3436 = t3132*t3432;
  t3437 = t3434 + t3435 + t3436;
  t3440 = t3146*t3419;
  t3442 = 0.340999127418*t3062*t3426;
  t3443 = -0.930418*t3064*t3432;
  t3444 = t3440 + t3442 + t3443;
  t3446 = 0.340999127418*t3062*t3419;
  t3447 = t3164*t3426;
  t3448 = 0.366501*t3064*t3432;
  t3449 = t3446 + t3447 + t3448;
  t3451 = 0.366501*t3124*t3437;
  t3452 = 0.340999127418*t3119*t3444;
  t3453 = t3186*t3449;
  t3454 = t3451 + t3452 + t3453;
  t3456 = -0.930418*t3124*t3437;
  t3457 = t3202*t3444;
  t3458 = 0.340999127418*t3119*t3449;
  t3459 = t3456 + t3457 + t3458;
  t3461 = t3214*t3437;
  t3462 = 0.930418*t3124*t3444;
  t3463 = -0.366501*t3124*t3449;
  t3464 = t3461 + t3462 + t3463;
  p_output1[0]=0.091*t2215*t2714 + 0.091*t2740*t2745 + t2695*t2747*t2784 + t2833*t2851 + t2871*t2880 + t2910*t2933 + t2944*t2950 + t2981*t2990 + t3009*t3017 + t3027*t3037 + t3044*t3054 + t3066*t3076 + t3082*t3092 + t3099*t3108 + t3128*t3136 + t3144*t3154 + t3160*t3173 + t3182*t3188 + t3197*t3208 + t3212*t3221 + 0.061947*(-0.366501*t3180*t3188 + 0.930418*t3180*t3208 + t3221*t3226) - 0.792446*(0.340999127418*t3178*t3188 - 0.930418*t3180*t3221 + t3208*t3238) + 0.402615*(0.340999127418*t3178*t3208 + 0.366501*t3180*t3221 + t3188*t3245) + var1[0];
  p_output1[1]=t2657*t2747*t2784 + 0.091*t2215*t3254 + 0.091*t2745*t3258 + t2851*t3263 + t2880*t3267 + t2933*t3272 + t2950*t3277 + t2990*t3282 + t3009*t3287 + t3027*t3292 + t3044*t3297 + t3066*t3302 + t3082*t3307 + t3099*t3312 + t3128*t3317 + t3144*t3327 + t3160*t3334 + t3182*t3339 + t3197*t3344 + t3212*t3349 - 0.792446*(0.340999127418*t3178*t3339 + t3238*t3344 - 0.930418*t3180*t3349) + 0.402615*(t3245*t3339 + 0.340999127418*t3178*t3344 + 0.366501*t3180*t3349) + 0.061947*(-0.366501*t3180*t3339 + 0.930418*t3180*t3344 + t3226*t3349) + var1[1];
  p_output1[2]=0.091*t2215*t2701*t2747 + 0.091*t2230*t2745*t2747 - 1.*t2697*t2784 + t2851*t3379 + t2880*t3383 + t2933*t3388 + t2950*t3393 + t2990*t3398 + t3009*t3403 + t3027*t3409 + t3044*t3414 + t3066*t3419 + t3082*t3426 + t3099*t3432 + t3128*t3437 + t3144*t3444 + t3160*t3449 + t3182*t3454 + t3197*t3459 + t3212*t3464 - 0.792446*(0.340999127418*t3178*t3454 + t3238*t3459 - 0.930418*t3180*t3464) + 0.402615*(t3245*t3454 + 0.340999127418*t3178*t3459 + 0.366501*t3180*t3464) + 0.061947*(-0.366501*t3180*t3454 + 0.930418*t3180*t3459 + t3226*t3464) + var1[2];
}



void gen::kin::p_toe_pitch_joint_left(Eigen::Ref<Eigen::VectorXd> p_output1, const Eigen::Ref<const Eigen::VectorXd> var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}
